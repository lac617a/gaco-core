/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AnimationBuilder, AutocompleteTypes, CheckboxChangeEventDetail, Color, ComponentProps, ComponentRef, FrameworkDelegate, InputChangeEventDetail, ModalBreakpointChangeEventDetail, OverlayEventDetail, ScrollBaseDetail, ScrollDetail, StyleEventDetail, TextFieldTypes, ToastButton } from "./interface";
import { CounterFormatter } from "./components/gasco-item/gasco-item-interface";
import { GascoSafeString } from "./utils/sanitization";
export namespace Components {
    interface GascoBackdrop {
        /**
          * If `true`, the backdrop will stop propagation on tap.
         */
        "stopPropagation": boolean;
        /**
          * If `true`, the backdrop will can be clicked and will emit the `gascoBackdropTap` event.
         */
        "tappable": boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible": boolean;
    }
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong": boolean;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'default';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any | null;
    }
    interface GascoContent {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.
         */
        "forceOverscroll"?: boolean;
        /**
          * If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.
         */
        "fullscreen": boolean;
        /**
          * Get the element where the actual scrolling takes place. This element can be used to subscribe to `scroll` events or manually modify `scrollTop`. However, it's recommended to use the API provided by `gasco-content`:  i.e. Using `gascoScroll`, `gascoScrollStart`, `gascoScrollEnd` for scrolling events and `scrollToPoint()` to scroll the content into a certain point.
         */
        "getScrollElement": () => Promise<HTMLElement>;
        /**
          * Scroll by a specified X/Y distance in the component.
          * @param x The amount to scroll by on the horizontal axis.
          * @param y The amount to scroll by on the vertical axis.
          * @param duration The amount of time to take scrolling by that amount.
         */
        "scrollByPoint": (x: number, y: number, duration: number) => Promise<void>;
        /**
          * Because of performance reasons, gascoScroll events are disabled by default, in order to enable them and start listening from (gascoScroll), set this property to `true`.
         */
        "scrollEvents": boolean;
        /**
          * Scroll to the bottom of the component.
          * @param duration The amount of time to take scrolling to the bottom. Defaults to `0`.
         */
        "scrollToBottom": (duration?: number) => Promise<void>;
        /**
          * Scroll to a specified X/Y location in the component.
          * @param x The point to scroll to on the horizontal axis.
          * @param y The point to scroll to on the vertical axis.
          * @param duration The amount of time to take scrolling to that point. Defaults to `0`.
         */
        "scrollToPoint": (x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>;
        /**
          * Scroll to the top of the component.
          * @param duration The amount of time to take scrolling to the top. Defaults to `0`.
         */
        "scrollToTop": (duration?: number) => Promise<void>;
        /**
          * If you want to enable the content scrolling in the X axis, set this property to `true`.
         */
        "scrollX": boolean;
        /**
          * If you want to disable the content scrolling in the Y axis, set this property to `false`.
         */
        "scrollY": boolean;
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize": string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * Instructional text that show before the input has a value. The Input numeric for flat country.
         */
        "indicator"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Instructional text that show before the input has a value. The Input label.
         */
        "label"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "limit"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `gasco-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `gasco-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "textHelp"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * We can make everything automatic after completing the code for default is false.
         */
        "autosubmit": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * With secure what you are looking for is that the fields are not seen. for default is true
         */
        "secure": boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `ion-input` or `ion-textarea`.
         */
        "counter": boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
         */
        "counterFormatter"?: CounterFormatter;
        /**
          * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.
         */
        "detail"?: boolean;
        /**
          * The icon to use when `detail` is set to `true`.
         */
        "detailIcon": string;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.
         */
        "fill"?: 'outline' | 'solid';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: 'full' | 'inset' | 'none';
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * When using a router, it specifies the transition animation when navigating to another page using `href`.
         */
        "routerAnimation": AnimationBuilder | undefined;
        /**
          * The shape of the item. If "round" it will have increased border radius.
         */
        "shape"?: 'round';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface GascoList {
        /**
          * If `true`, the list will have margin around it and rounded corners.
         */
        "inset": boolean;
        /**
          * How the bottom border should be displayed on all items.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoListHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * How the bottom border should be displayed on the list header.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoModal {
        /**
          * If `true`, the modal will animate.
         */
        "animated": boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint": number;
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Dismiss the modal overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Returns the current breakpoint of a sheet style modal
         */
        "getCurrentBreakpoint": () => Promise<number | undefined>;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController": boolean;
        /**
          * Additional attributes to pass to the modal.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.
         */
        "isOpen": boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * If `true`, the modal will body.
         */
        "modalBody"?: string;
        /**
          * If `true`, the modal will title.
         */
        "modalTitle"?: string;
        /**
          * Returns a promise that resolves when the modal did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the modal will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * Present the modal overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * Move a sheet style modal to a specific breakpoint. The breakpoint value must be a value defined in your `breakpoints` array.
         */
        "setCurrentBreakpoint": (breakpoint: number) => Promise<void>;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop": boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose": boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger": string | undefined;
        /**
          * If `"default"`, the modal will default. For default `"default"`.
         */
        "type"?: 'simple' | 'basic' | 'default';
    }
    interface GascoRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated": boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the toast overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the toast. This can be useful in a button handler for determining which button was clicked to dismiss the toast. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration": number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Returns a promise that resolves when the toast did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the toast will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position": 'top' | 'bottom' | 'middle';
        /**
          * Present the toast overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * The Toast size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the toast will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
    }
}
export interface GascoBackdropCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoBackdropElement;
}
export interface GascoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonElement;
}
export interface GascoButtonIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonIconElement;
}
export interface GascoCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoCheckboxElement;
}
export interface GascoContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoContentElement;
}
export interface GascoInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputElement;
}
export interface GascoInputCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputCodeElement;
}
export interface GascoLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoLabelElement;
}
export interface GascoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoModalElement;
}
export interface GascoRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoRadioElement;
}
export interface GascoToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoToastElement;
}
declare global {
    interface HTMLGascoBackdropElement extends Components.GascoBackdrop, HTMLStencilElement {
    }
    var HTMLGascoBackdropElement: {
        prototype: HTMLGascoBackdropElement;
        new (): HTMLGascoBackdropElement;
    };
    interface HTMLGascoButtonElement extends Components.GascoButton, HTMLStencilElement {
    }
    var HTMLGascoButtonElement: {
        prototype: HTMLGascoButtonElement;
        new (): HTMLGascoButtonElement;
    };
    interface HTMLGascoButtonIconElement extends Components.GascoButtonIcon, HTMLStencilElement {
    }
    var HTMLGascoButtonIconElement: {
        prototype: HTMLGascoButtonIconElement;
        new (): HTMLGascoButtonIconElement;
    };
    interface HTMLGascoCheckboxElement extends Components.GascoCheckbox, HTMLStencilElement {
    }
    var HTMLGascoCheckboxElement: {
        prototype: HTMLGascoCheckboxElement;
        new (): HTMLGascoCheckboxElement;
    };
    interface HTMLGascoContentElement extends Components.GascoContent, HTMLStencilElement {
    }
    var HTMLGascoContentElement: {
        prototype: HTMLGascoContentElement;
        new (): HTMLGascoContentElement;
    };
    interface HTMLGascoInputElement extends Components.GascoInput, HTMLStencilElement {
    }
    var HTMLGascoInputElement: {
        prototype: HTMLGascoInputElement;
        new (): HTMLGascoInputElement;
    };
    interface HTMLGascoInputCodeElement extends Components.GascoInputCode, HTMLStencilElement {
    }
    var HTMLGascoInputCodeElement: {
        prototype: HTMLGascoInputCodeElement;
        new (): HTMLGascoInputCodeElement;
    };
    interface HTMLGascoItemElement extends Components.GascoItem, HTMLStencilElement {
    }
    var HTMLGascoItemElement: {
        prototype: HTMLGascoItemElement;
        new (): HTMLGascoItemElement;
    };
    interface HTMLGascoLabelElement extends Components.GascoLabel, HTMLStencilElement {
    }
    var HTMLGascoLabelElement: {
        prototype: HTMLGascoLabelElement;
        new (): HTMLGascoLabelElement;
    };
    interface HTMLGascoListElement extends Components.GascoList, HTMLStencilElement {
    }
    var HTMLGascoListElement: {
        prototype: HTMLGascoListElement;
        new (): HTMLGascoListElement;
    };
    interface HTMLGascoListHeaderElement extends Components.GascoListHeader, HTMLStencilElement {
    }
    var HTMLGascoListHeaderElement: {
        prototype: HTMLGascoListHeaderElement;
        new (): HTMLGascoListHeaderElement;
    };
    interface HTMLGascoModalElement extends Components.GascoModal, HTMLStencilElement {
    }
    var HTMLGascoModalElement: {
        prototype: HTMLGascoModalElement;
        new (): HTMLGascoModalElement;
    };
    interface HTMLGascoRadioElement extends Components.GascoRadio, HTMLStencilElement {
    }
    var HTMLGascoRadioElement: {
        prototype: HTMLGascoRadioElement;
        new (): HTMLGascoRadioElement;
    };
    interface HTMLGascoToastElement extends Components.GascoToast, HTMLStencilElement {
    }
    var HTMLGascoToastElement: {
        prototype: HTMLGascoToastElement;
        new (): HTMLGascoToastElement;
    };
    interface HTMLElementTagNameMap {
        "gasco-backdrop": HTMLGascoBackdropElement;
        "gasco-button": HTMLGascoButtonElement;
        "gasco-button-icon": HTMLGascoButtonIconElement;
        "gasco-checkbox": HTMLGascoCheckboxElement;
        "gasco-content": HTMLGascoContentElement;
        "gasco-input": HTMLGascoInputElement;
        "gasco-input-code": HTMLGascoInputCodeElement;
        "gasco-item": HTMLGascoItemElement;
        "gasco-label": HTMLGascoLabelElement;
        "gasco-list": HTMLGascoListElement;
        "gasco-list-header": HTMLGascoListHeaderElement;
        "gasco-modal": HTMLGascoModalElement;
        "gasco-radio": HTMLGascoRadioElement;
        "gasco-toast": HTMLGascoToastElement;
    }
}
declare namespace LocalJSX {
    interface GascoBackdrop {
        /**
          * Emitted when the backdrop is tapped.
         */
        "onGascoBackdropTap"?: (event: GascoBackdropCustomEvent<void>) => void;
        /**
          * If `true`, the backdrop will stop propagation on tap.
         */
        "stopPropagation"?: boolean;
        /**
          * If `true`, the backdrop will can be clicked and will emit the `gascoBackdropTap` event.
         */
        "tappable"?: boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible"?: boolean;
    }
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong"?: boolean;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'default';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGascoBlur"?: (event: GascoCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onGascoChange"?: (event: GascoCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onGascoFocus"?: (event: GascoCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoCheckboxCustomEvent<StyleEventDetail>) => void;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface GascoContent {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.
         */
        "forceOverscroll"?: boolean;
        /**
          * If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.
         */
        "fullscreen"?: boolean;
        /**
          * Emitted while scrolling. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScroll"?: (event: GascoContentCustomEvent<ScrollDetail>) => void;
        /**
          * Emitted when the scroll has ended. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScrollEnd"?: (event: GascoContentCustomEvent<ScrollBaseDetail>) => void;
        /**
          * Emitted when the scroll has started. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScrollStart"?: (event: GascoContentCustomEvent<ScrollBaseDetail>) => void;
        /**
          * Because of performance reasons, gascoScroll events are disabled by default, in order to enable them and start listening from (gascoScroll), set this property to `true`.
         */
        "scrollEvents"?: boolean;
        /**
          * If you want to enable the content scrolling in the X axis, set this property to `true`.
         */
        "scrollX"?: boolean;
        /**
          * If you want to disable the content scrolling in the Y axis, set this property to `false`.
         */
        "scrollY"?: boolean;
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * Instructional text that show before the input has a value. The Input numeric for flat country.
         */
        "indicator"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Instructional text that show before the input has a value. The Input label.
         */
        "label"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "limit"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "textHelp"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * We can make everything automatic after completing the code for default is false.
         */
        "autosubmit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCodeCustomEvent<InputChangeEventDetail>) => void;
        "onGascoCodeDone"?: (event: GascoInputCodeCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCodeCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCodeCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * With secure what you are looking for is that the fields are not seen. for default is true
         */
        "secure"?: boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `ion-input` or `ion-textarea`.
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
         */
        "counterFormatter"?: CounterFormatter;
        /**
          * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.
         */
        "detail"?: boolean;
        /**
          * The icon to use when `detail` is set to `true`.
         */
        "detailIcon"?: string;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.
         */
        "fill"?: 'outline' | 'solid';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: 'full' | 'inset' | 'none';
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * When using a router, it specifies the transition animation when navigating to another page using `href`.
         */
        "routerAnimation"?: AnimationBuilder | undefined;
        /**
          * The shape of the item. If "round" it will have increased border radius.
         */
        "shape"?: 'round';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * Emitted when the color changes.
         */
        "onIonColor"?: (event: GascoLabelCustomEvent<StyleEventDetail>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: GascoLabelCustomEvent<StyleEventDetail>) => void;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface GascoList {
        /**
          * If `true`, the list will have margin around it and rounded corners.
         */
        "inset"?: boolean;
        /**
          * How the bottom border should be displayed on all items.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoListHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * How the bottom border should be displayed on the list header.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoModal {
        /**
          * If `true`, the modal will animate.
         */
        "animated"?: boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint"?: number;
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController"?: boolean;
        /**
          * Additional attributes to pass to the modal.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.
         */
        "isOpen"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * If `true`, the modal will body.
         */
        "modalBody"?: string;
        /**
          * If `true`, the modal will title.
         */
        "modalTitle"?: string;
        /**
          * Emitted after the modal has accepted. Shorthand for gascoModalAccepted.
         */
        "onAccepted"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has dismissed. Shorthand for gascoModalDidDismiss.
         */
        "onDidDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented. Shorthand for gascoModalWillDismiss.
         */
        "onDidPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted after the modal breakpoint has changed.
         */
        "onGascoBreakpointDidChange"?: (event: GascoModalCustomEvent<ModalBreakpointChangeEventDetail>) => void;
        /**
          * Emitted after the modal has accepted.
         */
        "onGascoModalAccepted"?: (event: GascoModalCustomEvent<any>) => void;
        /**
          * Emitted after the modal has dismissed.
         */
        "onGascoModalDidDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onGascoModalDidPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed.
         */
        "onGascoModalWillDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented.
         */
        "onGascoModalWillPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed. Shorthand for gascoModalWillDismiss.
         */
        "onWillDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented. Shorthand for gascoModalWillPresent.
         */
        "onWillPresent"?: (event: GascoModalCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop"?: boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger"?: string | undefined;
        /**
          * If `"default"`, the modal will default. For default `"default"`.
         */
        "type"?: 'simple' | 'basic' | 'default';
    }
    interface GascoRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onIonBlur"?: (event: GascoRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onIonFocus"?: (event: GascoRadioCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: GascoRadioCustomEvent<StyleEventDetail>) => void;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated"?: boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration"?: number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Emitted after the toast has dismissed.
         */
        "onGascoToastDidDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the toast has presented.
         */
        "onGascoToastDidPresent"?: (event: GascoToastCustomEvent<void>) => void;
        /**
          * Emitted before the toast has dismissed.
         */
        "onGascoToastWillDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the toast has presented.
         */
        "onGascoToastWillPresent"?: (event: GascoToastCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position"?: 'top' | 'bottom' | 'middle';
        /**
          * The Toast size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the toast will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
    }
    interface IntrinsicElements {
        "gasco-backdrop": GascoBackdrop;
        "gasco-button": GascoButton;
        "gasco-button-icon": GascoButtonIcon;
        "gasco-checkbox": GascoCheckbox;
        "gasco-content": GascoContent;
        "gasco-input": GascoInput;
        "gasco-input-code": GascoInputCode;
        "gasco-item": GascoItem;
        "gasco-label": GascoLabel;
        "gasco-list": GascoList;
        "gasco-list-header": GascoListHeader;
        "gasco-modal": GascoModal;
        "gasco-radio": GascoRadio;
        "gasco-toast": GascoToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gasco-backdrop": LocalJSX.GascoBackdrop & JSXBase.HTMLAttributes<HTMLGascoBackdropElement>;
            "gasco-button": LocalJSX.GascoButton & JSXBase.HTMLAttributes<HTMLGascoButtonElement>;
            "gasco-button-icon": LocalJSX.GascoButtonIcon & JSXBase.HTMLAttributes<HTMLGascoButtonIconElement>;
            "gasco-checkbox": LocalJSX.GascoCheckbox & JSXBase.HTMLAttributes<HTMLGascoCheckboxElement>;
            "gasco-content": LocalJSX.GascoContent & JSXBase.HTMLAttributes<HTMLGascoContentElement>;
            "gasco-input": LocalJSX.GascoInput & JSXBase.HTMLAttributes<HTMLGascoInputElement>;
            "gasco-input-code": LocalJSX.GascoInputCode & JSXBase.HTMLAttributes<HTMLGascoInputCodeElement>;
            "gasco-item": LocalJSX.GascoItem & JSXBase.HTMLAttributes<HTMLGascoItemElement>;
            "gasco-label": LocalJSX.GascoLabel & JSXBase.HTMLAttributes<HTMLGascoLabelElement>;
            "gasco-list": LocalJSX.GascoList & JSXBase.HTMLAttributes<HTMLGascoListElement>;
            "gasco-list-header": LocalJSX.GascoListHeader & JSXBase.HTMLAttributes<HTMLGascoListHeaderElement>;
            "gasco-modal": LocalJSX.GascoModal & JSXBase.HTMLAttributes<HTMLGascoModalElement>;
            "gasco-radio": LocalJSX.GascoRadio & JSXBase.HTMLAttributes<HTMLGascoRadioElement>;
            "gasco-toast": LocalJSX.GascoToast & JSXBase.HTMLAttributes<HTMLGascoToastElement>;
        }
    }
}
