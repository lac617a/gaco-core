/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AnimationBuilder, AutocompleteTypes, Color, InputChangeEventDetail, OverlayEventDetail, StyleEventDetail, TextFieldTypes, ToastButton } from "./interface";
import { GascoSafeString } from "./utils/sanitization";
export namespace Components {
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong": boolean;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'default';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize": string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user interact with the input mode code.
         */
        "code": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `gasco-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `gasco-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The initial size of the control. This value is in pixels inless the value of the type attribute is `text` or `password`, in which case it is an integer number os charactersd. This attribute applies only whe the `type` attribute is set to `text`, `search`, `tel`, `url`, `email`, or `password`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        "autosubmit": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated": boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the toast overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the toast. This can be useful in a button handler for determining which button was clicked to dismiss the toast. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration": number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Header to be shown in the toast.
         */
        "header"?: string;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * The name of the icon to display, or the path to a valid SVG file. See `ion-icon`. https://ionic.io/ionicons
         */
        "icon"?: string;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Returns a promise that resolves when the toast did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the toast will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position": 'top' | 'bottom' | 'middle';
        /**
          * Present the toast overlay after it has been created.
         */
        "present": () => Promise<void>;
    }
}
export interface GascoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonElement;
}
export interface GascoButtonIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonIconElement;
}
export interface GascoInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputElement;
}
export interface GascoInputCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputCodeElement;
}
export interface GascoToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoToastElement;
}
declare global {
    interface HTMLGascoButtonElement extends Components.GascoButton, HTMLStencilElement {
    }
    var HTMLGascoButtonElement: {
        prototype: HTMLGascoButtonElement;
        new (): HTMLGascoButtonElement;
    };
    interface HTMLGascoButtonIconElement extends Components.GascoButtonIcon, HTMLStencilElement {
    }
    var HTMLGascoButtonIconElement: {
        prototype: HTMLGascoButtonIconElement;
        new (): HTMLGascoButtonIconElement;
    };
    interface HTMLGascoInputElement extends Components.GascoInput, HTMLStencilElement {
    }
    var HTMLGascoInputElement: {
        prototype: HTMLGascoInputElement;
        new (): HTMLGascoInputElement;
    };
    interface HTMLGascoInputCodeElement extends Components.GascoInputCode, HTMLStencilElement {
    }
    var HTMLGascoInputCodeElement: {
        prototype: HTMLGascoInputCodeElement;
        new (): HTMLGascoInputCodeElement;
    };
    interface HTMLGascoItemElement extends Components.GascoItem, HTMLStencilElement {
    }
    var HTMLGascoItemElement: {
        prototype: HTMLGascoItemElement;
        new (): HTMLGascoItemElement;
    };
    interface HTMLGascoToastElement extends Components.GascoToast, HTMLStencilElement {
    }
    var HTMLGascoToastElement: {
        prototype: HTMLGascoToastElement;
        new (): HTMLGascoToastElement;
    };
    interface HTMLElementTagNameMap {
        "gasco-button": HTMLGascoButtonElement;
        "gasco-button-icon": HTMLGascoButtonIconElement;
        "gasco-input": HTMLGascoInputElement;
        "gasco-input-code": HTMLGascoInputCodeElement;
        "gasco-item": HTMLGascoItemElement;
        "gasco-toast": HTMLGascoToastElement;
    }
}
declare namespace LocalJSX {
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong"?: boolean;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'default';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user interact with the input mode code.
         */
        "code"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The initial size of the control. This value is in pixels inless the value of the type attribute is `text` or `password`, in which case it is an integer number os charactersd. This attribute applies only whe the `type` attribute is set to `text`, `search`, `tel`, `url`, `email`, or `password`, otherwise it is ignored.
         */
        "size"?: number;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        "autosubmit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCodeCustomEvent<InputChangeEventDetail>) => void;
        "onGascoCodeDone"?: (event: GascoInputCodeCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCodeCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCodeCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated"?: boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration"?: number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Header to be shown in the toast.
         */
        "header"?: string;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * The name of the icon to display, or the path to a valid SVG file. See `ion-icon`. https://ionic.io/ionicons
         */
        "icon"?: string;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Emitted after the toast has dismissed.
         */
        "onGascoToastDidDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the toast has presented.
         */
        "onGascoToastDidPresent"?: (event: GascoToastCustomEvent<void>) => void;
        /**
          * Emitted before the toast has dismissed.
         */
        "onGascoToastWillDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the toast has presented.
         */
        "onGascoToastWillPresent"?: (event: GascoToastCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position"?: 'top' | 'bottom' | 'middle';
    }
    interface IntrinsicElements {
        "gasco-button": GascoButton;
        "gasco-button-icon": GascoButtonIcon;
        "gasco-input": GascoInput;
        "gasco-input-code": GascoInputCode;
        "gasco-item": GascoItem;
        "gasco-toast": GascoToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gasco-button": LocalJSX.GascoButton & JSXBase.HTMLAttributes<HTMLGascoButtonElement>;
            "gasco-button-icon": LocalJSX.GascoButtonIcon & JSXBase.HTMLAttributes<HTMLGascoButtonIconElement>;
            "gasco-input": LocalJSX.GascoInput & JSXBase.HTMLAttributes<HTMLGascoInputElement>;
            "gasco-input-code": LocalJSX.GascoInputCode & JSXBase.HTMLAttributes<HTMLGascoInputCodeElement>;
            "gasco-item": LocalJSX.GascoItem & JSXBase.HTMLAttributes<HTMLGascoItemElement>;
            "gasco-toast": LocalJSX.GascoToast & JSXBase.HTMLAttributes<HTMLGascoToastElement>;
        }
    }
}
