/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionGroupChangeEventDetail, AnimationBuilder, AutocompleteTypes, CheckboxChangeEventDetail, ChipChangeEventDetail, Color, ComponentProps, ComponentRef, DatetimeChangeEventDetail, DatetimeParts, FrameworkDelegate, InputChangeEventDetail, MenuChangeEventDetail, ModalBreakpointChangeEventDetail, OverlayEventDetail, PaginatorChangeEventDetail, PaginatorReadyEventDetail, PopoverAttributes, PopoverSize, PositionAlign, PositionReference, PositionSide, RangeChangeEventDetail, RangeKnobMoveEndEventDetail, RangeKnobMoveStartEventDetail, RangeValue, ScrollBaseDetail, ScrollDetail, SearchbarChangeEventDetail, SegmentButtonLayout, SegmentChangeEventDetail, Side, StyleEventDetail, TextFieldTypes, ToastButton, TriggerAction } from "./interface";
import { CounterFormatter } from "./components/gasco-item/gasco-item-interface";
import { PickerColumnItem } from "./components/gasco-picker-column-internal/picker-column-internal-interfaces";
import { PickerInternalChangeEventDetail } from "./components/gasco-picker-internal/picker-internal-interfaces";
import { PinFormatter } from "./components/gasco-range/gasco-range-interface";
import { GascoSafeString } from "./utils/sanitization";
export namespace Components {
    interface GascoAccordion {
        /**
          * If `true`, the accordion cannot be interacted with.
         */
        "disabled": boolean;
        /**
          * If `true`, the accordion cannot be interacted with, but does not alter the opacity.
         */
        "readonly": boolean;
        /**
          * The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
         */
        "toggleIcon": string;
        /**
          * The slot inside of `gasco-item` to place the toggle icon. Defaults to `'end'`.
         */
        "toggleIconSlot": 'start' | 'end';
        /**
          * The value of the accordion. Defaults to an autogenerated value.
         */
        "value": string;
    }
    interface GascoAccordionGroup {
        /**
          * If `true`, all accordions inside of the accordion group will animate when expanding or collapsing.
         */
        "animated": boolean;
        /**
          * If `true`, the accordion group cannot be interacted with.
         */
        "disabled": boolean;
        /**
          * Describes the expansion behavior for each accordion. Possible values are `"compact"` and `"inset"`. Defaults to `"compact"`.
         */
        "expand": 'compact' | 'inset';
        "getAccordions": () => Promise<HTMLGascoAccordionElement[]>;
        /**
          * If `true`, the accordion group can have multiple accordion components expanded at the same time.
         */
        "multiple"?: boolean;
        /**
          * If `true`, the accordion group cannot be interacted with, but does not alter the opacity.
         */
        "readonly": boolean;
        "requestAccordionToggle": (accordionValue: string | undefined, accordionExpand: boolean) => Promise<void>;
        /**
          * The value of the accordion group.
         */
        "value"?: string | string[] | null;
    }
    interface GascoAutocomplete {
        /**
          * If `true`, enable searchbar animation.
         */
        "animated": boolean;
        /**
          * Set the input's autocomplete property.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Set the input's autocorrect property.
         */
        "autocorrect": 'on' | 'off';
        /**
          * Set the cancel button icon. Only applies to `md` mode. Defaults to `arrow-back-sharp`.
         */
        "cancelButtonIcon": string;
        /**
          * Set the the cancel button text. Only applies to `ios` mode.
         */
        "cancelButtonText": string;
        /**
          * Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.
         */
        "clearIcon"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "color"?: Color;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gascoChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Set the input's placeholder. `placeholder` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
         */
        "placeholder": string;
        /**
          * The icon to use as the search icon. Defaults to `search-outline` in `ios` mode and `search-sharp` in `md` mode.
         */
        "searchIcon"?: string;
        /**
          * Sets focus on the specified `ion-searchbar`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the behavior for the cancel button. Defaults to `"never"`. Setting to `"focus"` shows the cancel button on focus. Setting to `"never"` hides the cancel button. Setting to `"always"` shows the cancel button regardless of focus state.
         */
        "showCancelButton": 'never' | 'focus' | 'always';
        /**
          * Sets the behavior for the clear button. Defaults to `"focus"`. Setting to `"focus"` shows the clear button on focus if the input is not empty. Setting to `"never"` hides the clear button. Setting to `"always"` shows the clear button regardless of focus state, but only if the input is not empty.
         */
        "showClearButton": 'never' | 'focus' | 'always';
        /**
          * If `true`, enable spellcheck on the input.
         */
        "spellcheck": boolean;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestionlist": string[];
        /**
          * Set the type of the input.
         */
        "type": string;
        /**
          * the value of the searchbar.
         */
        "value"?: string | null;
    }
    interface GascoBackdrop {
        /**
          * If `true`, the backdrop will stop propagation on tap.
         */
        "stopPropagation": boolean;
        /**
          * If `true`, the backdrop will can be clicked and will emit the `gascoBackdropTap` event.
         */
        "tappable": boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible": boolean;
    }
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong": boolean;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'clear';
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress": boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoCard {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * card direction, default is "vertical".
         */
        "direction"?: 'horizontal' | 'horizontal-reverse' | 'vertical';
        /**
          * If `true`, the user cannot interact with the card.
         */
        "disabled": boolean;
    }
    interface GascoCardContent {
    }
    interface GascoCardHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the card header will be translucent.
         */
        "translucent": boolean;
    }
    interface GascoCardTitle {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
    }
    interface GascoCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any | null;
    }
    interface GascoChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the chip.
         */
        "disabled": boolean;
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
    }
    interface GascoContent {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.
         */
        "forceOverscroll"?: boolean;
        /**
          * If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.
         */
        "fullscreen": boolean;
        /**
          * Get the element where the actual scrolling takes place. This element can be used to subscribe to `scroll` events or manually modify `scrollTop`. However, it's recommended to use the API provided by `gasco-content`:  i.e. Using `gascoScroll`, `gascoScrollStart`, `gascoScrollEnd` for scrolling events and `scrollToPoint()` to scroll the content into a certain point.
         */
        "getScrollElement": () => Promise<HTMLElement>;
        /**
          * Scroll by a specified X/Y distance in the component.
          * @param x The amount to scroll by on the horizontal axis.
          * @param y The amount to scroll by on the vertical axis.
          * @param duration The amount of time to take scrolling by that amount.
         */
        "scrollByPoint": (x: number, y: number, duration: number) => Promise<void>;
        /**
          * Because of performance reasons, gascoScroll events are disabled by default, in order to enable them and start listening from (gascoScroll), set this property to `true`.
         */
        "scrollEvents": boolean;
        /**
          * Scroll to the bottom of the component.
          * @param duration The amount of time to take scrolling to the bottom. Defaults to `0`.
         */
        "scrollToBottom": (duration?: number) => Promise<void>;
        /**
          * Scroll to a specified X/Y location in the component.
          * @param x The point to scroll to on the horizontal axis.
          * @param y The point to scroll to on the vertical axis.
          * @param duration The amount of time to take scrolling to that point. Defaults to `0`.
         */
        "scrollToPoint": (x: number | undefined | null, y: number | undefined | null, duration?: number) => Promise<void>;
        /**
          * Scroll to the top of the component.
          * @param duration The amount of time to take scrolling to the top. Defaults to `0`.
         */
        "scrollToTop": (duration?: number) => Promise<void>;
        /**
          * If you want to enable the content scrolling in the X axis, set this property to `true`.
         */
        "scrollX": boolean;
        /**
          * If you want to disable the content scrolling in the Y axis, set this property to `false`.
         */
        "scrollY": boolean;
    }
    interface GascoDatetime {
        /**
          * Emits the gascoCancel event and optionally closes the popover or modal that the datetime was presented in.
         */
        "cancel": (closeOverlay?: boolean) => Promise<void>;
        /**
          * The text to display on the picker's cancel button.
         */
        "cancelText": string;
        /**
          * The text to display on the picker's "Clear" button.
         */
        "clearText": string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Confirms the selected datetime value, updates the `value` property, and optionally closes the popover or modal that the datetime was presented in.
         */
        "confirm": (closeOverlay?: boolean) => Promise<void>;
        /**
          * Values used to create the list of selectable days. By default every day is shown for the given month. However, to control exactly which days of the month to display, the `dayValues` input can take a number, an array of numbers, or a string of comma separated numbers. Note that even if the array days have an invalid number for the selected month, like `31` in February, it will correctly not show days which are not valid for the selected month.
         */
        "dayValues"?: number[] | number | string;
        /**
          * If `true`, the user cannot interact with the datetime.
         */
        "disabled": boolean;
        /**
          * The text to display on the picker's "Done" button.
         */
        "doneText": string;
        /**
          * The first day of the week to use for `gasco-datetime`. The default value is `0` and represents Sunday.
         */
        "firstDayOfWeek": number;
        /**
          * The hour cycle of the `gasco-datetime`. If no value is set, this is specified by the current locale.
         */
        "hourCycle"?: 'h23' | 'h12';
        /**
          * Values used to create the list of selectable hours. By default the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However, to control exactly which hours to display, the `hourValues` input can take a number, an array of numbers, or a string of comma separated numbers.
         */
        "hourValues"?: number[] | number | string;
        /**
          * Returns if an individual date (calendar day) is enabled or disabled.  If `true`, the day will be enabled/interactive. If `false`, the day will be disabled/non-interactive.  The function accepts an ISO 8601 date string of a given day. By default, all days are enabled. Developers can use this function to write custom logic to disable certain days.  The function is called for each rendered calendar day, for the previous, current and next month. Custom implementations should be optimized for performance to avoid jank.
         */
        "isDateEnabled"?: (dateIsoString: string) => boolean;
        /**
          * The locale to use for `gasco-datetime`. This impacts month and day name formatting. The `'default'` value refers to the default locale set by your device.
         */
        "locale": string;
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Values used to create the list of selectable minutes. By default the minutes range from `0` to `59`. However, to control exactly which minutes to display, the `minuteValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if the minute selections should only be every 15 minutes, then this input value would be `minuteValues="0,15,30,45"`.
         */
        "minuteValues"?: number[] | number | string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Values used to create the list of selectable months. By default the month values range from `1` to `12`. However, to control exactly which months to display, the `monthValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if only summer months should be shown, then this input value would be `monthValues="6,7,8"`. Note that month numbers do *not* have a zero-based index, meaning January's value is `1`, and December's is `12`.
         */
        "monthValues"?: number[] | number | string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Which values you want to select. `'date'` will show a calendar picker to select the month, day, and year. `'time'` will show a time picker to select the hour, minute, and (optionally) AM/PM. `'date-time'` will show the date picker first and time picker second. `'time-date'` will show the time picker first and date picker second.
         */
        "presentation": 'date-time' | 'time-date' | 'date' | 'time' | 'month' | 'year' | 'month-year';
        /**
          * If `true`, the datetime appears normal but is not interactive.
         */
        "readonly": boolean;
        /**
          * Resets the internal state of the datetime but does not update the value. Passing a valid ISO-8601 string will reset the state of the component to the provided date. If no value is provided, the internal state will be reset to the clamped value of the min, max and today.
         */
        "reset": (startDate?: string) => Promise<void>;
        /**
          * If `true`, a "Clear" button will be rendered alongside the default "Cancel" and "OK" buttons at the bottom of the `gasco-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
         */
        "showClearButton": boolean;
        /**
          * If `true`, the default "Cancel" and "OK" buttons will be rendered at the bottom of the `gasco-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
         */
        "showDefaultButtons": boolean;
        /**
          * If `true`, the default "Time" label will be rendered for the time selector of the `gasco-datetime` component. Developers can also use the `time-label` slot if they want to customize this label. If a custom label is set in the `time-label` slot then the default label will not be rendered.
         */
        "showDefaultTimeLabel": boolean;
        /**
          * If `true`, a header will be shown above the calendar picker. On `ios` mode this will include the slotted title, and on `md` mode this will include the slotted title and the selected date.
         */
        "showDefaultTitle": boolean;
        /**
          * If `cover`, the `gasco-datetime` will expand to cover the full width of its container. If `fixed`, the `gasco-datetime` will have a fixed width.
         */
        "size": 'cover' | 'fixed';
        /**
          * The value of the datetime as a valid ISO 8601 datetime string.
         */
        "value"?: string | null;
        /**
          * Values used to create the list of selectable years. By default the year values range between the `min` and `max` datetime inputs. However, to control exactly which years to display, the `yearValues` input can take a number, an array of numbers, or string of comma separated numbers. For example, to show upcoming and recent leap years, then this input's value would be `yearValues="2024,2020,2016,2012,2008"`.
         */
        "yearValues"?: number[] | number | string;
    }
    interface GascoDialog {
        /**
          * If `true`, the dialog will animate.
         */
        "animated": boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint": number;
        /**
          * If `true`, the dialog will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a dialog can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the dialog will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the dialog will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Dismiss the dialog overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the dialog. For example, 'cancel' or 'backdrop'.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Returns the current breakpoint of a sheet style dialog
         */
        "getCurrentBreakpoint": () => Promise<number | undefined>;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController": boolean;
        /**
          * Additional attributes to pass to the dialog.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the dialog will open. If `false`, the dialog will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the dialog dismisses. You will need to do that in your code.
         */
        "isOpen": boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Returns a promise that resolves when the dialog did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the dialog will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * Present the dialog overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * The element that presented the dialog. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * Move a sheet style dialog to a specific breakpoint. The breakpoint value must be a value defined in your `breakpoints` array.
         */
        "setCurrentBreakpoint": (breakpoint: number) => Promise<void>;
        /**
          * If `true`, a backdrop will be displayed behind the dialog. This property controls whether or not the backdrop darkens the screen when the dialog is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop": boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the dialog can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose": boolean;
        /**
          * An ID corresponding to the trigger element that causes the dialog to open when clicked.
         */
        "trigger": string | undefined;
        /**
          * If `"default"`, the dialog will default. For default `"default"`.
         */
        "type"?: string;
        /**
          * If `true`, the dialog will button close.
         */
        "withclose": boolean;
    }
    interface GascoDialogContent {
    }
    interface GascoDialogFooter {
        /**
          * If `true`, the card footer will be line.
         */
        "line"?: boolean;
        /**
          * If `true`, the card footer will be line.
         */
        "position"?: 'left' | 'right';
        /**
          * If `true`, the card footer will be translucent.
         */
        "translucent": boolean;
    }
    interface GascoDialogHeader {
        /**
          * If `true`, the card header will be translucent.
         */
        "translucent": boolean;
    }
    interface GascoDialogTitle {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
    }
    interface GascoDivider {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * The Divider shape.
         */
        "shape"?: 'round';
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize": string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, the user cannot interact with the calendar.
         */
        "calendar": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * Instructional text that show before the input has a value. The Input numeric for flat country.
         */
        "indicator"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Instructional text that show before the input has a value. The Input label.
         */
        "label"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "limit"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `gasco-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `gasco-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "textHelp"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * We can make everything automatic after completing the code for default is false.
         */
        "autosubmit": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        "fireFocusEvents": boolean;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * With secure what you are looking for is that the fields are not seen. for default is true
         */
        "secure": boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of control to display. The default type is `text`.
         */
        "type": 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button": boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `gasco-input` or `gasco-textarea`.
         */
        "counter": boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
         */
        "counterFormatter"?: CounterFormatter;
        /**
          * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.
         */
        "detail"?: boolean;
        /**
          * The icon to use when `detail` is set to `true`.
         */
        "detailIcon": string;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled": boolean;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "divider": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.
         */
        "fill"?: 'outline' | 'solid';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: 'full' | 'inset' | 'none';
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * When using a router, it specifies the transition animation when navigating to another page using `href`.
         */
        "routerAnimation": AnimationBuilder | undefined;
        /**
          * The shape of the item. If "round" it will have increased border radius.
         */
        "shape"?: 'round';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type": 'submit' | 'reset' | 'button';
    }
    interface GascoLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface GascoList {
        /**
          * If `true`, the list will have margin around it and rounded corners.
         */
        "inset": boolean;
        /**
          * How the bottom border should be displayed on all items.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoListHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * How the bottom border should be displayed on the list header.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoMenu {
        /**
          * Closes the menu. If the menu is already closed or it can't be closed, it returns `false`.
         */
        "close": (animated?: boolean) => Promise<boolean>;
        /**
          * The `id` of the main content. When using a router this is typically `gasco-router-outlet`. When not using a router, this is typically your main view's `gasco-content`. This is not the id of the `gasco-content` inside of your `gasco-menu`.
         */
        "contentId"?: string;
        /**
          * If `true`, the menu is disabled.
         */
        "disabled": boolean;
        /**
          * Returns `true` is the menu is active.  A menu is active when it can be opened or closed, meaning it's enabled and it's not part of a `gasco-split-pane`.
         */
        "isActive": () => Promise<boolean>;
        /**
          * Returns `true` is the menu is open.
         */
        "isOpen": () => Promise<boolean>;
        /**
          * The edge threshold for dragging the menu open. If a drag/swipe happens over this value, the menu is not triggered.
         */
        "maxEdgeStart": number;
        /**
          * An id for the menu.
         */
        "menuId"?: string;
        /**
          * Opens the menu. If the menu is already open or it can't be opened, it returns `false`.
         */
        "open": (animated?: boolean) => Promise<boolean>;
        /**
          * Opens or closes the button. If the operation can't be completed successfully, it returns `false`.
         */
        "setOpen": (shouldOpen: boolean, animated?: boolean) => Promise<boolean>;
        /**
          * Which side of the view the menu should be placed.
         */
        "side": Side;
        /**
          * If `true`, swiping the menu is enabled.
         */
        "swipeGesture": boolean;
        /**
          * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it. If the operation can't be completed successfully, it returns `false`.
         */
        "toggle": (animated?: boolean) => Promise<boolean>;
        /**
          * The display type of the menu. Available options: `"overlay"`, `"reveal"`, `"push"`.
         */
        "type"?: string;
    }
    interface GascoModal {
        /**
          * If `true`, the modal will animate.
         */
        "animated": boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint": number;
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Dismiss the modal overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Returns the current breakpoint of a sheet style modal
         */
        "getCurrentBreakpoint": () => Promise<number | undefined>;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController": boolean;
        /**
          * Additional attributes to pass to the modal.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.
         */
        "isOpen": boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * If `true`, the modal will body.
         */
        "modalBody"?: string;
        /**
          * If `true`, the modal will title.
         */
        "modalTitle"?: string;
        /**
          * Returns a promise that resolves when the modal did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the modal will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * Present the modal overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * Move a sheet style modal to a specific breakpoint. The breakpoint value must be a value defined in your `breakpoints` array.
         */
        "setCurrentBreakpoint": (breakpoint: number) => Promise<void>;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop": boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose": boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger": string | undefined;
        /**
          * If `"default"`, the modal will default. For default `"default"`.
         */
        "type"?: 'simple' | 'basic' | 'default';
    }
    interface GascoPaginator {
        /**
          * Additional attributes to pass to the pagiantor.
         */
        "htmlAttributes"?: { [key: string]: any };
        "itemCount"?: number;
        "page": number;
        "pageSize": number;
        "selectList"?: number[];
    }
    interface GascoPickerColumnInternal {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * A list of options to be displayed in the picker
         */
        "items": PickerColumnItem[];
        /**
          * If `true`, tapping the picker will reveal a number input keyboard that lets the user type in values for each picker column. This is useful when working with time pickers.
         */
        "numericInput": boolean;
        "scrollActiveItemIntoView": () => Promise<void>;
        /**
          * The selected option in the picker.
         */
        "value"?: string | number;
    }
    interface GascoPickerInternal {
    }
    interface GascoPopover {
        /**
          * Describes how to align the popover content with the `reference` point. Defaults to `'center'` for `ios` mode, and `'start'` for `md` mode.
         */
        "alignment"?: PositionAlign;
        /**
          * If `true`, the popover will animate.
         */
        "animated": boolean;
        /**
          * If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode. Does not apply in `md` mode.
         */
        "arrow": boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `gasco-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Dismiss the popover overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.
          * @param dismissParentPopover If `true`, dismissing this popover will also dismiss a parent popover if this popover is nested. Defaults to `true`.
         */
        "dismiss": (data?: any, role?: string, dismissParentPopover?: boolean) => Promise<boolean>;
        /**
          * If `true`, the popover will be automatically dismissed when the content has been clicked.
         */
        "dismissOnSelect": boolean;
        /**
          * Animation to use when the popover is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The event to pass to the popover animation.
         */
        "event": any;
        "getParentPopover": () => Promise<HTMLGascoPopoverElement | null>;
        "hasController": boolean;
        /**
          * Additional attributes to pass to the popover.
         */
        "htmlAttributes"?: PopoverAttributes;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
         */
        "isOpen": boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        "keyboardEvents": boolean;
        /**
          * Animation to use when the popover is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Returns a promise that resolves when the popover did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the popover will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * Present the popover overlay after it has been created. Developers can pass a mouse, touch, or pointer event to position the popover relative to where that event was dispatched.
         */
        "present": (event?: MouseEvent | TouchEvent | PointerEvent | CustomEvent) => Promise<void>;
        /**
          * When opening a popover from a trigger, we should not be modifying the `event` prop from inside the component. Additionally, when pressing the "Right" arrow key, we need to shift focus to the first descendant in the newly presented popover.
         */
        "presentFromTrigger": (event?: any, focusDescendant?: boolean) => Promise<void>;
        /**
          * Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.
         */
        "reference": PositionReference;
        /**
          * If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop": boolean;
        /**
          * Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.
         */
        "side": PositionSide;
        /**
          * Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.
         */
        "size": PopoverSize;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger": string | undefined;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
         */
        "triggerAction": TriggerAction;
    }
    interface GascoProgress {
        /**
          * If the buffer and value are smaller than 1, the buffer circles will show. The buffer should be between [0, 1].
         */
        "buffer": number;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"``.
         */
        "color"?: Color;
        /**
          * If true, reverse the progress bar direction.
         */
        "reversed": boolean;
        /**
          * The state of the progress bar, based on if the time the process takes is known or not. Default options are: `"determinate"` (no animation), `"indeterminate"` (animate from left to right).
         */
        "type": 'determinate' | 'indeterminate';
        /**
          * The value determines how much of the active bar should display when the `type` is `"determinate"`. The value should be between [0, 1].
         */
        "value": number;
    }
    interface GascoRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled": boolean;
        /**
          * If `true`, the radio is selected.
         */
        "ischecked": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface GascoRange {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, and `"danger"`.
         */
        "color"?: Color;
        /**
          * How long, in milliseconds, to wait to trigger the `gascoChange` event after each change in the range value. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the range.
         */
        "disabled": boolean;
        /**
          * Show two knobs.
         */
        "dualKnobs": boolean;
        /**
          * Maximum integer value of the range.
         */
        "max": number;
        /**
          * Minimum integer value of the range.
         */
        "min": number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * If `true`, a pin with integer value is shown when the knob is pressed.
         */
        "pin": boolean;
        /**
          * A callback used to format the pin text. By default the pin text is set to `Math.round(value)`.
         */
        "pinFormatter": PinFormatter;
        /**
          * If `true`, the knob snaps to tick marks evenly spaced based on the step property value.
         */
        "snaps": boolean;
        /**
          * Specifies the value granularity.
         */
        "step": number;
        /**
          * If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.
         */
        "ticks": boolean;
        /**
          * the value of the range.
         */
        "value": RangeValue;
    }
    interface GascoTab {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the segment.
         */
        "disabled": boolean;
        /**
          * If `true`, the segment buttons will overflow and the user can swipe to see them. In addition, this will disable the gesture to drag the indicator between the buttons in order to swipe to see hidden buttons.
         */
        "scrollable": boolean;
        /**
          * If `true`, navigating to an `GASCO-TAB-button` with the keyboard will focus and select the element. If `false`, keyboard navigation will only focus the `GASCO-TAB-button` element.
         */
        "selectOnFocus": boolean;
        /**
          * If `true`, users will be able to swipe between segment buttons to activate them.
         */
        "swipeGesture": boolean;
        /**
          * the value of the segment.
         */
        "value"?: string | null;
    }
    interface GascoTabButton {
        /**
          * If `true`, the user cannot interact with the segment button.
         */
        "disabled": boolean;
        /**
          * Set the layout of the text and icon in the segment.
         */
        "layout"?: SegmentButtonLayout;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * The value of the segment button.
         */
        "value": string;
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated": boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the toast overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the toast. This can be useful in a button handler for determining which button was clicked to dismiss the toast. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration": number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Returns a promise that resolves when the toast did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the toast will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position": 'top' | 'bottom' | 'middle';
        /**
          * Present the toast overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * The Toast size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the toast will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
    }
    interface GascoTooltip {
        /**
          * If `true`, the tooltip will be visible.
         */
        "label"?: string;
        /**
          * If `true`, the tooltip will be position.
         */
        "position"?: 'top' | 'bottom';
        /**
          * If `true`, the tooltip will stop propagation on tap.
         */
        "stopPropagation": boolean;
        /**
          * If `true`, the tooltip will can be clicked and will emit the `gascoTooltip` event.
         */
        "tappable": boolean;
        /**
          * If `true`, the tooltip will be visible.
         */
        "visible": boolean;
    }
}
export interface GascoAccordionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoAccordionGroupElement;
}
export interface GascoAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoAutocompleteElement;
}
export interface GascoBackdropCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoBackdropElement;
}
export interface GascoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonElement;
}
export interface GascoButtonIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoButtonIconElement;
}
export interface GascoCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoCheckboxElement;
}
export interface GascoChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoChipElement;
}
export interface GascoContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoContentElement;
}
export interface GascoDatetimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoDatetimeElement;
}
export interface GascoDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoDialogElement;
}
export interface GascoInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputElement;
}
export interface GascoInputCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoInputCodeElement;
}
export interface GascoLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoLabelElement;
}
export interface GascoMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoMenuElement;
}
export interface GascoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoModalElement;
}
export interface GascoPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoPaginatorElement;
}
export interface GascoPickerColumnInternalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoPickerColumnInternalElement;
}
export interface GascoPickerInternalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoPickerInternalElement;
}
export interface GascoPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoPopoverElement;
}
export interface GascoRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoRadioElement;
}
export interface GascoRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoRangeElement;
}
export interface GascoTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoTabElement;
}
export interface GascoToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoToastElement;
}
export interface GascoTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGascoTooltipElement;
}
declare global {
    interface HTMLGascoAccordionElement extends Components.GascoAccordion, HTMLStencilElement {
    }
    var HTMLGascoAccordionElement: {
        prototype: HTMLGascoAccordionElement;
        new (): HTMLGascoAccordionElement;
    };
    interface HTMLGascoAccordionGroupElement extends Components.GascoAccordionGroup, HTMLStencilElement {
    }
    var HTMLGascoAccordionGroupElement: {
        prototype: HTMLGascoAccordionGroupElement;
        new (): HTMLGascoAccordionGroupElement;
    };
    interface HTMLGascoAutocompleteElement extends Components.GascoAutocomplete, HTMLStencilElement {
    }
    var HTMLGascoAutocompleteElement: {
        prototype: HTMLGascoAutocompleteElement;
        new (): HTMLGascoAutocompleteElement;
    };
    interface HTMLGascoBackdropElement extends Components.GascoBackdrop, HTMLStencilElement {
    }
    var HTMLGascoBackdropElement: {
        prototype: HTMLGascoBackdropElement;
        new (): HTMLGascoBackdropElement;
    };
    interface HTMLGascoButtonElement extends Components.GascoButton, HTMLStencilElement {
    }
    var HTMLGascoButtonElement: {
        prototype: HTMLGascoButtonElement;
        new (): HTMLGascoButtonElement;
    };
    interface HTMLGascoButtonIconElement extends Components.GascoButtonIcon, HTMLStencilElement {
    }
    var HTMLGascoButtonIconElement: {
        prototype: HTMLGascoButtonIconElement;
        new (): HTMLGascoButtonIconElement;
    };
    interface HTMLGascoCardElement extends Components.GascoCard, HTMLStencilElement {
    }
    var HTMLGascoCardElement: {
        prototype: HTMLGascoCardElement;
        new (): HTMLGascoCardElement;
    };
    interface HTMLGascoCardContentElement extends Components.GascoCardContent, HTMLStencilElement {
    }
    var HTMLGascoCardContentElement: {
        prototype: HTMLGascoCardContentElement;
        new (): HTMLGascoCardContentElement;
    };
    interface HTMLGascoCardHeaderElement extends Components.GascoCardHeader, HTMLStencilElement {
    }
    var HTMLGascoCardHeaderElement: {
        prototype: HTMLGascoCardHeaderElement;
        new (): HTMLGascoCardHeaderElement;
    };
    interface HTMLGascoCardTitleElement extends Components.GascoCardTitle, HTMLStencilElement {
    }
    var HTMLGascoCardTitleElement: {
        prototype: HTMLGascoCardTitleElement;
        new (): HTMLGascoCardTitleElement;
    };
    interface HTMLGascoCheckboxElement extends Components.GascoCheckbox, HTMLStencilElement {
    }
    var HTMLGascoCheckboxElement: {
        prototype: HTMLGascoCheckboxElement;
        new (): HTMLGascoCheckboxElement;
    };
    interface HTMLGascoChipElement extends Components.GascoChip, HTMLStencilElement {
    }
    var HTMLGascoChipElement: {
        prototype: HTMLGascoChipElement;
        new (): HTMLGascoChipElement;
    };
    interface HTMLGascoContentElement extends Components.GascoContent, HTMLStencilElement {
    }
    var HTMLGascoContentElement: {
        prototype: HTMLGascoContentElement;
        new (): HTMLGascoContentElement;
    };
    interface HTMLGascoDatetimeElement extends Components.GascoDatetime, HTMLStencilElement {
    }
    var HTMLGascoDatetimeElement: {
        prototype: HTMLGascoDatetimeElement;
        new (): HTMLGascoDatetimeElement;
    };
    interface HTMLGascoDialogElement extends Components.GascoDialog, HTMLStencilElement {
    }
    var HTMLGascoDialogElement: {
        prototype: HTMLGascoDialogElement;
        new (): HTMLGascoDialogElement;
    };
    interface HTMLGascoDialogContentElement extends Components.GascoDialogContent, HTMLStencilElement {
    }
    var HTMLGascoDialogContentElement: {
        prototype: HTMLGascoDialogContentElement;
        new (): HTMLGascoDialogContentElement;
    };
    interface HTMLGascoDialogFooterElement extends Components.GascoDialogFooter, HTMLStencilElement {
    }
    var HTMLGascoDialogFooterElement: {
        prototype: HTMLGascoDialogFooterElement;
        new (): HTMLGascoDialogFooterElement;
    };
    interface HTMLGascoDialogHeaderElement extends Components.GascoDialogHeader, HTMLStencilElement {
    }
    var HTMLGascoDialogHeaderElement: {
        prototype: HTMLGascoDialogHeaderElement;
        new (): HTMLGascoDialogHeaderElement;
    };
    interface HTMLGascoDialogTitleElement extends Components.GascoDialogTitle, HTMLStencilElement {
    }
    var HTMLGascoDialogTitleElement: {
        prototype: HTMLGascoDialogTitleElement;
        new (): HTMLGascoDialogTitleElement;
    };
    interface HTMLGascoDividerElement extends Components.GascoDivider, HTMLStencilElement {
    }
    var HTMLGascoDividerElement: {
        prototype: HTMLGascoDividerElement;
        new (): HTMLGascoDividerElement;
    };
    interface HTMLGascoInputElement extends Components.GascoInput, HTMLStencilElement {
    }
    var HTMLGascoInputElement: {
        prototype: HTMLGascoInputElement;
        new (): HTMLGascoInputElement;
    };
    interface HTMLGascoInputCodeElement extends Components.GascoInputCode, HTMLStencilElement {
    }
    var HTMLGascoInputCodeElement: {
        prototype: HTMLGascoInputCodeElement;
        new (): HTMLGascoInputCodeElement;
    };
    interface HTMLGascoItemElement extends Components.GascoItem, HTMLStencilElement {
    }
    var HTMLGascoItemElement: {
        prototype: HTMLGascoItemElement;
        new (): HTMLGascoItemElement;
    };
    interface HTMLGascoLabelElement extends Components.GascoLabel, HTMLStencilElement {
    }
    var HTMLGascoLabelElement: {
        prototype: HTMLGascoLabelElement;
        new (): HTMLGascoLabelElement;
    };
    interface HTMLGascoListElement extends Components.GascoList, HTMLStencilElement {
    }
    var HTMLGascoListElement: {
        prototype: HTMLGascoListElement;
        new (): HTMLGascoListElement;
    };
    interface HTMLGascoListHeaderElement extends Components.GascoListHeader, HTMLStencilElement {
    }
    var HTMLGascoListHeaderElement: {
        prototype: HTMLGascoListHeaderElement;
        new (): HTMLGascoListHeaderElement;
    };
    interface HTMLGascoMenuElement extends Components.GascoMenu, HTMLStencilElement {
    }
    var HTMLGascoMenuElement: {
        prototype: HTMLGascoMenuElement;
        new (): HTMLGascoMenuElement;
    };
    interface HTMLGascoModalElement extends Components.GascoModal, HTMLStencilElement {
    }
    var HTMLGascoModalElement: {
        prototype: HTMLGascoModalElement;
        new (): HTMLGascoModalElement;
    };
    interface HTMLGascoPaginatorElement extends Components.GascoPaginator, HTMLStencilElement {
    }
    var HTMLGascoPaginatorElement: {
        prototype: HTMLGascoPaginatorElement;
        new (): HTMLGascoPaginatorElement;
    };
    interface HTMLGascoPickerColumnInternalElement extends Components.GascoPickerColumnInternal, HTMLStencilElement {
    }
    var HTMLGascoPickerColumnInternalElement: {
        prototype: HTMLGascoPickerColumnInternalElement;
        new (): HTMLGascoPickerColumnInternalElement;
    };
    interface HTMLGascoPickerInternalElement extends Components.GascoPickerInternal, HTMLStencilElement {
    }
    var HTMLGascoPickerInternalElement: {
        prototype: HTMLGascoPickerInternalElement;
        new (): HTMLGascoPickerInternalElement;
    };
    interface HTMLGascoPopoverElement extends Components.GascoPopover, HTMLStencilElement {
    }
    var HTMLGascoPopoverElement: {
        prototype: HTMLGascoPopoverElement;
        new (): HTMLGascoPopoverElement;
    };
    interface HTMLGascoProgressElement extends Components.GascoProgress, HTMLStencilElement {
    }
    var HTMLGascoProgressElement: {
        prototype: HTMLGascoProgressElement;
        new (): HTMLGascoProgressElement;
    };
    interface HTMLGascoRadioElement extends Components.GascoRadio, HTMLStencilElement {
    }
    var HTMLGascoRadioElement: {
        prototype: HTMLGascoRadioElement;
        new (): HTMLGascoRadioElement;
    };
    interface HTMLGascoRangeElement extends Components.GascoRange, HTMLStencilElement {
    }
    var HTMLGascoRangeElement: {
        prototype: HTMLGascoRangeElement;
        new (): HTMLGascoRangeElement;
    };
    interface HTMLGascoTabElement extends Components.GascoTab, HTMLStencilElement {
    }
    var HTMLGascoTabElement: {
        prototype: HTMLGascoTabElement;
        new (): HTMLGascoTabElement;
    };
    interface HTMLGascoTabButtonElement extends Components.GascoTabButton, HTMLStencilElement {
    }
    var HTMLGascoTabButtonElement: {
        prototype: HTMLGascoTabButtonElement;
        new (): HTMLGascoTabButtonElement;
    };
    interface HTMLGascoToastElement extends Components.GascoToast, HTMLStencilElement {
    }
    var HTMLGascoToastElement: {
        prototype: HTMLGascoToastElement;
        new (): HTMLGascoToastElement;
    };
    interface HTMLGascoTooltipElement extends Components.GascoTooltip, HTMLStencilElement {
    }
    var HTMLGascoTooltipElement: {
        prototype: HTMLGascoTooltipElement;
        new (): HTMLGascoTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "gasco-accordion": HTMLGascoAccordionElement;
        "gasco-accordion-group": HTMLGascoAccordionGroupElement;
        "gasco-autocomplete": HTMLGascoAutocompleteElement;
        "gasco-backdrop": HTMLGascoBackdropElement;
        "gasco-button": HTMLGascoButtonElement;
        "gasco-button-icon": HTMLGascoButtonIconElement;
        "gasco-card": HTMLGascoCardElement;
        "gasco-card-content": HTMLGascoCardContentElement;
        "gasco-card-header": HTMLGascoCardHeaderElement;
        "gasco-card-title": HTMLGascoCardTitleElement;
        "gasco-checkbox": HTMLGascoCheckboxElement;
        "gasco-chip": HTMLGascoChipElement;
        "gasco-content": HTMLGascoContentElement;
        "gasco-datetime": HTMLGascoDatetimeElement;
        "gasco-dialog": HTMLGascoDialogElement;
        "gasco-dialog-content": HTMLGascoDialogContentElement;
        "gasco-dialog-footer": HTMLGascoDialogFooterElement;
        "gasco-dialog-header": HTMLGascoDialogHeaderElement;
        "gasco-dialog-title": HTMLGascoDialogTitleElement;
        "gasco-divider": HTMLGascoDividerElement;
        "gasco-input": HTMLGascoInputElement;
        "gasco-input-code": HTMLGascoInputCodeElement;
        "gasco-item": HTMLGascoItemElement;
        "gasco-label": HTMLGascoLabelElement;
        "gasco-list": HTMLGascoListElement;
        "gasco-list-header": HTMLGascoListHeaderElement;
        "gasco-menu": HTMLGascoMenuElement;
        "gasco-modal": HTMLGascoModalElement;
        "gasco-paginator": HTMLGascoPaginatorElement;
        "gasco-picker-column-internal": HTMLGascoPickerColumnInternalElement;
        "gasco-picker-internal": HTMLGascoPickerInternalElement;
        "gasco-popover": HTMLGascoPopoverElement;
        "gasco-progress": HTMLGascoProgressElement;
        "gasco-radio": HTMLGascoRadioElement;
        "gasco-range": HTMLGascoRangeElement;
        "gasco-tab": HTMLGascoTabElement;
        "gasco-tab-button": HTMLGascoTabButtonElement;
        "gasco-toast": HTMLGascoToastElement;
        "gasco-tooltip": HTMLGascoTooltipElement;
    }
}
declare namespace LocalJSX {
    interface GascoAccordion {
        /**
          * If `true`, the accordion cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the accordion cannot be interacted with, but does not alter the opacity.
         */
        "readonly"?: boolean;
        /**
          * The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
         */
        "toggleIcon"?: string;
        /**
          * The slot inside of `gasco-item` to place the toggle icon. Defaults to `'end'`.
         */
        "toggleIconSlot"?: 'start' | 'end';
        /**
          * The value of the accordion. Defaults to an autogenerated value.
         */
        "value"?: string;
    }
    interface GascoAccordionGroup {
        /**
          * If `true`, all accordions inside of the accordion group will animate when expanding or collapsing.
         */
        "animated"?: boolean;
        /**
          * If `true`, the accordion group cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * Describes the expansion behavior for each accordion. Possible values are `"compact"` and `"inset"`. Defaults to `"compact"`.
         */
        "expand"?: 'compact' | 'inset';
        /**
          * If `true`, the accordion group can have multiple accordion components expanded at the same time.
         */
        "multiple"?: boolean;
        /**
          * Emitted when the value property has changed.
         */
        "onIonChange"?: (event: GascoAccordionGroupCustomEvent<AccordionGroupChangeEventDetail>) => void;
        /**
          * If `true`, the accordion group cannot be interacted with, but does not alter the opacity.
         */
        "readonly"?: boolean;
        /**
          * The value of the accordion group.
         */
        "value"?: string | string[] | null;
    }
    interface GascoAutocomplete {
        /**
          * If `true`, enable searchbar animation.
         */
        "animated"?: boolean;
        /**
          * Set the input's autocomplete property.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Set the input's autocorrect property.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * Set the cancel button icon. Only applies to `md` mode. Defaults to `arrow-back-sharp`.
         */
        "cancelButtonIcon"?: string;
        /**
          * Set the the cancel button text. Only applies to `ios` mode.
         */
        "cancelButtonText"?: string;
        /**
          * Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.
         */
        "clearIcon"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "color"?: Color;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `gascoChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the cancel button is clicked.
         */
        "onGascoCancel"?: (event: GascoAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoAutocompleteCustomEvent<SearchbarChangeEventDetail>) => void;
        /**
          * Emitted when the clear input button is clicked.
         */
        "onGascoClear"?: (event: GascoAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoAutocompleteCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoAutocompleteCustomEvent<StyleEventDetail>) => void;
        /**
          * Set the input's placeholder. `placeholder` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
         */
        "placeholder"?: string;
        /**
          * The icon to use as the search icon. Defaults to `search-outline` in `ios` mode and `search-sharp` in `md` mode.
         */
        "searchIcon"?: string;
        /**
          * Sets the behavior for the cancel button. Defaults to `"never"`. Setting to `"focus"` shows the cancel button on focus. Setting to `"never"` hides the cancel button. Setting to `"always"` shows the cancel button regardless of focus state.
         */
        "showCancelButton"?: 'never' | 'focus' | 'always';
        /**
          * Sets the behavior for the clear button. Defaults to `"focus"`. Setting to `"focus"` shows the clear button on focus if the input is not empty. Setting to `"never"` hides the clear button. Setting to `"always"` shows the clear button regardless of focus state, but only if the input is not empty.
         */
        "showClearButton"?: 'never' | 'focus' | 'always';
        /**
          * If `true`, enable spellcheck on the input.
         */
        "spellcheck"?: boolean;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestionlist"?: string[];
        /**
          * Set the type of the input.
         */
        "type"?: string;
        /**
          * the value of the searchbar.
         */
        "value"?: string | null;
    }
    interface GascoBackdrop {
        /**
          * Emitted when the backdrop is tapped.
         */
        "onGascoBackdropTap"?: (event: GascoBackdropCustomEvent<void>) => void;
        /**
          * If `true`, the backdrop will stop propagation on tap.
         */
        "stopPropagation"?: boolean;
        /**
          * If `true`, the backdrop will can be clicked and will emit the `gascoBackdropTap` event.
         */
        "tappable"?: boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible"?: boolean;
    }
    interface GascoButton {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"` except inside of a toolbar, where the default is `"clear"`.
         */
        "fill"?: 'clear' | 'outline' | 'solid' | 'default';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, activates a button with a heavier font weight.
         */
        "strong"?: boolean;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoButtonIcon {
        /**
          * The type of button.
         */
        "buttonType"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"clear"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`.
         */
        "fill"?: | 'outline' | 'solid' | 'clear';
        /**
          * Emitted when the button loses focus.
         */
        "onGascoBlur"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGascoFocus"?: (event: GascoButtonIconCustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the button in progress.
         */
        "progress"?: boolean;
        /**
          * The button shape.
         */
        "shape"?: 'round';
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoCard {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * card direction, default is "vertical".
         */
        "direction"?: 'horizontal' | 'horizontal-reverse' | 'vertical';
        /**
          * If `true`, the user cannot interact with the card.
         */
        "disabled"?: boolean;
    }
    interface GascoCardContent {
    }
    interface GascoCardHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the card header will be translucent.
         */
        "translucent"?: boolean;
    }
    interface GascoCardTitle {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
    }
    interface GascoCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the checkbox will visually appear as indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGascoBlur"?: (event: GascoCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onGascoChange"?: (event: GascoCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onGascoFocus"?: (event: GascoCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoCheckboxCustomEvent<StyleEventDetail>) => void;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface GascoChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the chip.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the chip loses focus.
         */
        "onGascoBlur"?: (event: GascoChipCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onGascoChange"?: (event: GascoChipCustomEvent<ChipChangeEventDetail>) => void;
        /**
          * Emitted when the chip has focus.
         */
        "onGascoFocus"?: (event: GascoChipCustomEvent<void>) => void;
        /**
          * The button size.
         */
        "size"?: 'small' | 'default' | 'large';
    }
    interface GascoContent {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.
         */
        "forceOverscroll"?: boolean;
        /**
          * If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.
         */
        "fullscreen"?: boolean;
        /**
          * Emitted while scrolling. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScroll"?: (event: GascoContentCustomEvent<ScrollDetail>) => void;
        /**
          * Emitted when the scroll has ended. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScrollEnd"?: (event: GascoContentCustomEvent<ScrollBaseDetail>) => void;
        /**
          * Emitted when the scroll has started. This event is disabled by default. Set `scrollEvents` to `true` to enable.
         */
        "onGascoScrollStart"?: (event: GascoContentCustomEvent<ScrollBaseDetail>) => void;
        /**
          * Because of performance reasons, gascoScroll events are disabled by default, in order to enable them and start listening from (gascoScroll), set this property to `true`.
         */
        "scrollEvents"?: boolean;
        /**
          * If you want to enable the content scrolling in the X axis, set this property to `true`.
         */
        "scrollX"?: boolean;
        /**
          * If you want to disable the content scrolling in the Y axis, set this property to `false`.
         */
        "scrollY"?: boolean;
    }
    interface GascoDatetime {
        /**
          * The text to display on the picker's cancel button.
         */
        "cancelText"?: string;
        /**
          * The text to display on the picker's "Clear" button.
         */
        "clearText"?: string;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Values used to create the list of selectable days. By default every day is shown for the given month. However, to control exactly which days of the month to display, the `dayValues` input can take a number, an array of numbers, or a string of comma separated numbers. Note that even if the array days have an invalid number for the selected month, like `31` in February, it will correctly not show days which are not valid for the selected month.
         */
        "dayValues"?: number[] | number | string;
        /**
          * If `true`, the user cannot interact with the datetime.
         */
        "disabled"?: boolean;
        /**
          * The text to display on the picker's "Done" button.
         */
        "doneText"?: string;
        /**
          * The first day of the week to use for `gasco-datetime`. The default value is `0` and represents Sunday.
         */
        "firstDayOfWeek"?: number;
        /**
          * The hour cycle of the `gasco-datetime`. If no value is set, this is specified by the current locale.
         */
        "hourCycle"?: 'h23' | 'h12';
        /**
          * Values used to create the list of selectable hours. By default the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However, to control exactly which hours to display, the `hourValues` input can take a number, an array of numbers, or a string of comma separated numbers.
         */
        "hourValues"?: number[] | number | string;
        /**
          * Returns if an individual date (calendar day) is enabled or disabled.  If `true`, the day will be enabled/interactive. If `false`, the day will be disabled/non-interactive.  The function accepts an ISO 8601 date string of a given day. By default, all days are enabled. Developers can use this function to write custom logic to disable certain days.  The function is called for each rendered calendar day, for the previous, current and next month. Custom implementations should be optimized for performance to avoid jank.
         */
        "isDateEnabled"?: (dateIsoString: string) => boolean;
        /**
          * The locale to use for `gasco-datetime`. This impacts month and day name formatting. The `'default'` value refers to the default locale set by your device.
         */
        "locale"?: string;
        /**
          * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
         */
        "max"?: string;
        /**
          * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
         */
        "min"?: string;
        /**
          * Values used to create the list of selectable minutes. By default the minutes range from `0` to `59`. However, to control exactly which minutes to display, the `minuteValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if the minute selections should only be every 15 minutes, then this input value would be `minuteValues="0,15,30,45"`.
         */
        "minuteValues"?: number[] | number | string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Values used to create the list of selectable months. By default the month values range from `1` to `12`. However, to control exactly which months to display, the `monthValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if only summer months should be shown, then this input value would be `monthValues="6,7,8"`. Note that month numbers do *not* have a zero-based index, meaning January's value is `1`, and December's is `12`.
         */
        "monthValues"?: number[] | number | string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the datetime loses focus.
         */
        "onGascoBlur"?: (event: GascoDatetimeCustomEvent<void>) => void;
        "onGascoBlurDatetime"?: (event: GascoDatetimeCustomEvent<any>) => void;
        /**
          * Emitted when the datetime selection was cancelled.
         */
        "onGascoCancel"?: (event: GascoDatetimeCustomEvent<void>) => void;
        /**
          * Emitted when the value (selected date) has changed.
         */
        "onGascoChange"?: (event: GascoDatetimeCustomEvent<DatetimeChangeEventDetail>) => void;
        /**
          * Emitted when the datetime loses focus.
         */
        "onGascoDatetimeReady"?: (event: GascoDatetimeCustomEvent<DatetimeParts>) => void;
        /**
          * Emitted when the datetime has focus.
         */
        "onGascoFocus"?: (event: GascoDatetimeCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoDatetimeCustomEvent<StyleEventDetail>) => void;
        /**
          * Which values you want to select. `'date'` will show a calendar picker to select the month, day, and year. `'time'` will show a time picker to select the hour, minute, and (optionally) AM/PM. `'date-time'` will show the date picker first and time picker second. `'time-date'` will show the time picker first and date picker second.
         */
        "presentation"?: 'date-time' | 'time-date' | 'date' | 'time' | 'month' | 'year' | 'month-year';
        /**
          * If `true`, the datetime appears normal but is not interactive.
         */
        "readonly"?: boolean;
        /**
          * If `true`, a "Clear" button will be rendered alongside the default "Cancel" and "OK" buttons at the bottom of the `gasco-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
         */
        "showClearButton"?: boolean;
        /**
          * If `true`, the default "Cancel" and "OK" buttons will be rendered at the bottom of the `gasco-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
         */
        "showDefaultButtons"?: boolean;
        /**
          * If `true`, the default "Time" label will be rendered for the time selector of the `gasco-datetime` component. Developers can also use the `time-label` slot if they want to customize this label. If a custom label is set in the `time-label` slot then the default label will not be rendered.
         */
        "showDefaultTimeLabel"?: boolean;
        /**
          * If `true`, a header will be shown above the calendar picker. On `ios` mode this will include the slotted title, and on `md` mode this will include the slotted title and the selected date.
         */
        "showDefaultTitle"?: boolean;
        /**
          * If `cover`, the `gasco-datetime` will expand to cover the full width of its container. If `fixed`, the `gasco-datetime` will have a fixed width.
         */
        "size"?: 'cover' | 'fixed';
        /**
          * The value of the datetime as a valid ISO 8601 datetime string.
         */
        "value"?: string | null;
        /**
          * Values used to create the list of selectable years. By default the year values range between the `min` and `max` datetime inputs. However, to control exactly which years to display, the `yearValues` input can take a number, an array of numbers, or string of comma separated numbers. For example, to show upcoming and recent leap years, then this input's value would be `yearValues="2024,2020,2016,2012,2008"`.
         */
        "yearValues"?: number[] | number | string;
    }
    interface GascoDialog {
        /**
          * If `true`, the dialog will animate.
         */
        "animated"?: boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint"?: number;
        /**
          * If `true`, the dialog will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a dialog can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the dialog will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the dialog will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController"?: boolean;
        /**
          * Additional attributes to pass to the dialog.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the dialog will open. If `false`, the dialog will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the dialog dismisses. You will need to do that in your code.
         */
        "isOpen"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Emitted after the dialog has accepted. Shorthand for gascoDialogAccepted.
         */
        "onAccepted"?: (event: GascoDialogCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the dialog has dismissed. Shorthand for gascoDialogDidDismiss.
         */
        "onDidDismiss"?: (event: GascoDialogCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the dialog has presented. Shorthand for gascoDialogWillDismiss.
         */
        "onDidPresent"?: (event: GascoDialogCustomEvent<void>) => void;
        /**
          * Emitted after the dialog breakpoint has changed.
         */
        "onGascoBreakpointDidChange"?: (event: GascoDialogCustomEvent<ModalBreakpointChangeEventDetail>) => void;
        /**
          * Emitted after the dialog has accepted.
         */
        "onGascoDialogAccepted"?: (event: GascoDialogCustomEvent<any>) => void;
        /**
          * Emitted after the dialog has dismissed.
         */
        "onGascoDialogDidDismiss"?: (event: GascoDialogCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the dialog has presented.
         */
        "onGascoDialogDidPresent"?: (event: GascoDialogCustomEvent<void>) => void;
        /**
          * Emitted before the dialog has dismissed.
         */
        "onGascoDialogWillDismiss"?: (event: GascoDialogCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the dialog has presented.
         */
        "onGascoDialogWillPresent"?: (event: GascoDialogCustomEvent<void>) => void;
        /**
          * Emitted before the dialog has dismissed. Shorthand for gascoDialogWillDismiss.
         */
        "onWillDismiss"?: (event: GascoDialogCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the dialog has presented. Shorthand for gascoDialogWillPresent.
         */
        "onWillPresent"?: (event: GascoDialogCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The element that presented the dialog. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * If `true`, a backdrop will be displayed behind the dialog. This property controls whether or not the backdrop darkens the screen when the dialog is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop"?: boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the dialog can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the dialog to open when clicked.
         */
        "trigger"?: string | undefined;
        /**
          * If `"default"`, the dialog will default. For default `"default"`.
         */
        "type"?: string;
        /**
          * If `true`, the dialog will button close.
         */
        "withclose"?: boolean;
    }
    interface GascoDialogContent {
    }
    interface GascoDialogFooter {
        /**
          * If `true`, the card footer will be line.
         */
        "line"?: boolean;
        /**
          * If `true`, the card footer will be line.
         */
        "position"?: 'left' | 'right';
        /**
          * If `true`, the card footer will be translucent.
         */
        "translucent"?: boolean;
    }
    interface GascoDialogHeader {
        /**
          * If `true`, the card header will be translucent.
         */
        "translucent"?: boolean;
    }
    interface GascoDialogTitle {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
    }
    interface GascoDivider {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * The Divider shape.
         */
        "shape"?: 'round';
    }
    interface GascoInput {
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `off`, `none`, `on`, `sentences`, `words`, `characters`.
         */
        "autocapitalize"?: string;
        /**
          * Indicates whther the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Whether auto correction should be enabled when the user is entering/editind the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, the user cannot interact with the calendar.
         */
        "calendar"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * Instructional text that show before the input has a value. The Input numeric for flat country.
         */
        "indicator"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`, `tel`, `url`, `email, `numeric`, `decimal`, `search`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * Instructional text that show before the input has a value. The Input label.
         */
        "label"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "limit"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string | number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `email`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input has focus to datetime.
         */
        "onGascoFocusDatetime"?: (event: GascoInputCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * Instructional text that show before the input has a value. This property applies only whe the `type` property is set to `email`, `number`, `password`, `search`, `tel`, `text`, or `url`, otherwise it is ignored.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `any` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Instructional text that show before the input has a value. The Input text help.
         */
        "textHelp"?: string;
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoInputCode {
        /**
          * This Boolean attributes lets you specify that a from control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * We can make everything automatic after completing the code for default is false.
         */
        "autosubmit"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `primary`, `secondary`, `tertiary`, `success`, `warning`, `danger`, `light`, and `dark`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `none`, `text`.
         */
        "inputmode"?: 'none' | 'text';
        /**
          * If the value of the type attribute is `text` or `numeric`, this attribute specifies the maximum number of characters that the user can enter. Defaulf `4`
         */
        "maxlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGascoBlur"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoInputCodeCustomEvent<InputChangeEventDetail>) => void;
        "onGascoCodeDone"?: (event: GascoInputCodeCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGascoFocus"?: (event: GascoInputCodeCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGascoInput"?: (event: GascoInputCodeCustomEvent<InputEvent>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoInputCodeCustomEvent<StyleEventDetail>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `text`, `search`, `tel`, `url`, `email`, `"date"`, or `password`, otherwise it is ignored. When the type attribute is `date`, `pattern` will only be used in browsers that do not support the `date` input type natively.
         */
        "pattern"?: string;
        /**
          * With secure what you are looking for is that the fields are not seen. for default is true
         */
        "secure"?: boolean;
        /**
          * The Input size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * The type of control to display. The default type is `text`.
         */
        "type"?: 'text' | 'number';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface GascoItem {
        /**
          * If `true`, a button tag will be rendered and the item will be tappable.
         */
        "button"?: boolean;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `gasco-input` or `gasco-textarea`.
         */
        "counter"?: boolean;
        /**
          * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
         */
        "counterFormatter"?: CounterFormatter;
        /**
          * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.
         */
        "detail"?: boolean;
        /**
          * The icon to use when `detail` is set to `true`.
         */
        "detailIcon"?: string;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "divider"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.
         */
        "fill"?: 'outline' | 'solid';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * How the bottom border should be displayed on the item.
         */
        "lines"?: 'full' | 'inset' | 'none';
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * When using a router, it specifies the transition animation when navigating to another page using `href`.
         */
        "routerAnimation"?: AnimationBuilder | undefined;
        /**
          * The shape of the item. If "round" it will have increased border radius.
         */
        "shape"?: 'round';
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button. Only used when an `onclick` or `button` property is present.
         */
        "type"?: 'submit' | 'reset' | 'button';
    }
    interface GascoLabel {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
         */
        "color"?: Color;
        /**
          * Emitted when the color changes.
         */
        "onGascoColor"?: (event: GascoLabelCustomEvent<StyleEventDetail>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoLabelCustomEvent<StyleEventDetail>) => void;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'fixed' | 'stacked' | 'floating';
    }
    interface GascoList {
        /**
          * If `true`, the list will have margin around it and rounded corners.
         */
        "inset"?: boolean;
        /**
          * How the bottom border should be displayed on all items.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoListHeader {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * How the bottom border should be displayed on the list header.
         */
        "lines"?: 'full' | 'inset' | 'none';
    }
    interface GascoMenu {
        /**
          * The `id` of the main content. When using a router this is typically `gasco-router-outlet`. When not using a router, this is typically your main view's `gasco-content`. This is not the id of the `gasco-content` inside of your `gasco-menu`.
         */
        "contentId"?: string;
        /**
          * If `true`, the menu is disabled.
         */
        "disabled"?: boolean;
        /**
          * The edge threshold for dragging the menu open. If a drag/swipe happens over this value, the menu is not triggered.
         */
        "maxEdgeStart"?: number;
        /**
          * An id for the menu.
         */
        "menuId"?: string;
        /**
          * Emitted when the menu is closed.
         */
        "onGascoDidClose"?: (event: GascoMenuCustomEvent<void>) => void;
        /**
          * Emitted when the menu is open.
         */
        "onGascoDidOpen"?: (event: GascoMenuCustomEvent<void>) => void;
        /**
          * Emitted when the menu state is changed.
         */
        "onGascoMenuChange"?: (event: GascoMenuCustomEvent<MenuChangeEventDetail>) => void;
        /**
          * Emitted when the menu is about to be closed.
         */
        "onGascoWillClose"?: (event: GascoMenuCustomEvent<void>) => void;
        /**
          * Emitted when the menu is about to be opened.
         */
        "onGascoWillOpen"?: (event: GascoMenuCustomEvent<void>) => void;
        /**
          * Which side of the view the menu should be placed.
         */
        "side"?: Side;
        /**
          * If `true`, swiping the menu is enabled.
         */
        "swipeGesture"?: boolean;
        /**
          * The display type of the menu. Available options: `"overlay"`, `"reveal"`, `"push"`.
         */
        "type"?: string;
    }
    interface GascoModal {
        /**
          * If `true`, the modal will animate.
         */
        "animated"?: boolean;
        /**
          * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
         */
        "backdropBreakpoint"?: number;
        /**
          * If `true`, the modal will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
         */
        "breakpoints"?: number[];
        /**
          * Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.
         */
        "canDismiss"?: undefined | boolean | (() => Promise<boolean>);
        /**
          * The component to display inside of the modal.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the modal component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Animation to use when the modal is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
         */
        "handle"?: boolean;
        "hasController"?: boolean;
        /**
          * Additional attributes to pass to the modal.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
         */
        "initialBreakpoint"?: number;
        /**
          * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.
         */
        "isOpen"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the modal is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * If `true`, the modal will body.
         */
        "modalBody"?: string;
        /**
          * If `true`, the modal will title.
         */
        "modalTitle"?: string;
        /**
          * Emitted after the modal has accepted. Shorthand for gascoModalAccepted.
         */
        "onAccepted"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has dismissed. Shorthand for gascoModalDidDismiss.
         */
        "onDidDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented. Shorthand for gascoModalWillDismiss.
         */
        "onDidPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted after the modal breakpoint has changed.
         */
        "onGascoBreakpointDidChange"?: (event: GascoModalCustomEvent<ModalBreakpointChangeEventDetail>) => void;
        /**
          * Emitted after the modal has accepted.
         */
        "onGascoModalAccepted"?: (event: GascoModalCustomEvent<any>) => void;
        /**
          * Emitted after the modal has dismissed.
         */
        "onGascoModalDidDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the modal has presented.
         */
        "onGascoModalDidPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed.
         */
        "onGascoModalWillDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented.
         */
        "onGascoModalWillPresent"?: (event: GascoModalCustomEvent<void>) => void;
        /**
          * Emitted before the modal has dismissed. Shorthand for gascoModalWillDismiss.
         */
        "onWillDismiss"?: (event: GascoModalCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the modal has presented. Shorthand for gascoModalWillPresent.
         */
        "onWillPresent"?: (event: GascoModalCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
         */
        "presentingElement"?: HTMLElement;
        /**
          * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop"?: boolean;
        /**
          * The Modal size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.
          * @deprecated - To prevent modals from dismissing, use canDismiss instead.
         */
        "swipeToClose"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the modal to open when clicked.
         */
        "trigger"?: string | undefined;
        /**
          * If `"default"`, the modal will default. For default `"default"`.
         */
        "type"?: 'simple' | 'basic' | 'default';
    }
    interface GascoPaginator {
        /**
          * Additional attributes to pass to the pagiantor.
         */
        "htmlAttributes"?: { [key: string]: any };
        "itemCount"?: number;
        "onGascoChange"?: (event: GascoPaginatorCustomEvent<PaginatorChangeEventDetail>) => void;
        "onGascoPaginatorReady"?: (event: GascoPaginatorCustomEvent<PaginatorReadyEventDetail>) => void;
        "onSizeChanged"?: (event: GascoPaginatorCustomEvent<any>) => void;
        "page"?: number;
        "pageSize"?: number;
        "selectList"?: number[];
    }
    interface GascoPickerColumnInternal {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * A list of options to be displayed in the picker
         */
        "items"?: PickerColumnItem[];
        /**
          * If `true`, tapping the picker will reveal a number input keyboard that lets the user type in values for each picker column. This is useful when working with time pickers.
         */
        "numericInput"?: boolean;
        /**
          * Emitted when the value has changed.
         */
        "onGascoChange"?: (event: GascoPickerColumnInternalCustomEvent<PickerColumnItem>) => void;
        /**
          * The selected option in the picker.
         */
        "value"?: string | number;
    }
    interface GascoPickerInternal {
        "onGascoInputModeChange"?: (event: GascoPickerInternalCustomEvent<PickerInternalChangeEventDetail>) => void;
    }
    interface GascoPopover {
        /**
          * Describes how to align the popover content with the `reference` point. Defaults to `'center'` for `ios` mode, and `'start'` for `md` mode.
         */
        "alignment"?: PositionAlign;
        /**
          * If `true`, the popover will animate.
         */
        "animated"?: boolean;
        /**
          * If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode. Does not apply in `md` mode.
         */
        "arrow"?: boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `gasco-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * If `true`, the popover will be automatically dismissed when the content has been clicked.
         */
        "dismissOnSelect"?: boolean;
        /**
          * Animation to use when the popover is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The event to pass to the popover animation.
         */
        "event"?: any;
        "hasController"?: boolean;
        /**
          * Additional attributes to pass to the popover.
         */
        "htmlAttributes"?: PopoverAttributes;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
         */
        "isOpen"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        "keyboardEvents"?: boolean;
        /**
          * Animation to use when the popover is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Emitted after the popover has dismissed. Shorthand for gascoPopoverDidDismiss.
         */
        "onDidDismiss"?: (event: GascoPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the popover has presented. Shorthand for gascoPopoverWillDismiss.
         */
        "onDidPresent"?: (event: GascoPopoverCustomEvent<void>) => void;
        /**
          * Emitted after the popover has dismissed.
         */
        "onGascoPopoverDidDismiss"?: (event: GascoPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the popover has presented.
         */
        "onGascoPopoverDidPresent"?: (event: GascoPopoverCustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed.
         */
        "onGascoPopoverWillDismiss"?: (event: GascoPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the popover has presented.
         */
        "onGascoPopoverWillPresent"?: (event: GascoPopoverCustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed. Shorthand for gascoPopoverWillDismiss.
         */
        "onWillDismiss"?: (event: GascoPopoverCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the popover has presented. Shorthand for gascoPopoverWillPresent.
         */
        "onWillPresent"?: (event: GascoPopoverCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.
         */
        "reference"?: PositionReference;
        /**
          * If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.
         */
        "showBackdrop"?: boolean;
        /**
          * Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.
         */
        "side"?: PositionSide;
        /**
          * Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.
         */
        "size"?: PopoverSize;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger"?: string | undefined;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
         */
        "triggerAction"?: TriggerAction;
    }
    interface GascoProgress {
        /**
          * If the buffer and value are smaller than 1, the buffer circles will show. The buffer should be between [0, 1].
         */
        "buffer"?: number;
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"``.
         */
        "color"?: Color;
        /**
          * If true, reverse the progress bar direction.
         */
        "reversed"?: boolean;
        /**
          * The state of the progress bar, based on if the time the process takes is known or not. Default options are: `"determinate"` (no animation), `"indeterminate"` (animate from left to right).
         */
        "type"?: 'determinate' | 'indeterminate';
        /**
          * The value determines how much of the active bar should display when the `type` is `"determinate"`. The value should be between [0, 1].
         */
        "value"?: number;
    }
    interface GascoRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the radio is selected.
         */
        "ischecked"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onGascoBlur"?: (event: GascoRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onGascoFocus"?: (event: GascoRadioCustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoRadioCustomEvent<StyleEventDetail>) => void;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface GascoRange {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, and `"danger"`.
         */
        "color"?: Color;
        /**
          * How long, in milliseconds, to wait to trigger the `gascoChange` event after each change in the range value. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the range.
         */
        "disabled"?: boolean;
        /**
          * Show two knobs.
         */
        "dualKnobs"?: boolean;
        /**
          * Maximum integer value of the range.
         */
        "max"?: number;
        /**
          * Minimum integer value of the range.
         */
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the range loses focus.
         */
        "onGascoBlur"?: (event: GascoRangeCustomEvent<void>) => void;
        /**
          * Emitted when the value property has changed.
         */
        "onGascoChange"?: (event: GascoRangeCustomEvent<RangeChangeEventDetail>) => void;
        /**
          * Emitted when the range has focus.
         */
        "onGascoFocus"?: (event: GascoRangeCustomEvent<void>) => void;
        /**
          * Emitted when the user finishes moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.
         */
        "onGascoKnobMoveEnd"?: (event: GascoRangeCustomEvent<RangeKnobMoveEndEventDetail>) => void;
        /**
          * Emitted when the user starts moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.
         */
        "onGascoKnobMoveStart"?: (event: GascoRangeCustomEvent<RangeKnobMoveStartEventDetail>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoRangeCustomEvent<StyleEventDetail>) => void;
        /**
          * If `true`, a pin with integer value is shown when the knob is pressed.
         */
        "pin"?: boolean;
        /**
          * A callback used to format the pin text. By default the pin text is set to `Math.round(value)`.
         */
        "pinFormatter"?: PinFormatter;
        /**
          * If `true`, the knob snaps to tick marks evenly spaced based on the step property value.
         */
        "snaps"?: boolean;
        /**
          * Specifies the value granularity.
         */
        "step"?: number;
        /**
          * If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.
         */
        "ticks"?: boolean;
        /**
          * the value of the range.
         */
        "value"?: RangeValue;
    }
    interface GascoTab {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"` and `"danger"`.
         */
        "color"?: Color;
        /**
          * If `true`, the user cannot interact with the segment.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the value property has changed and any dragging pointer has been released from `GASCO-TAB`.
         */
        "onGascoChange"?: (event: GascoTabCustomEvent<SegmentChangeEventDetail>) => void;
        /**
          * Emitted when user has dragged over a new button
         */
        "onGascoSelect"?: (event: GascoTabCustomEvent<SegmentChangeEventDetail>) => void;
        /**
          * Emitted when the styles change.
         */
        "onGascoStyle"?: (event: GascoTabCustomEvent<StyleEventDetail>) => void;
        /**
          * If `true`, the segment buttons will overflow and the user can swipe to see them. In addition, this will disable the gesture to drag the indicator between the buttons in order to swipe to see hidden buttons.
         */
        "scrollable"?: boolean;
        /**
          * If `true`, navigating to an `GASCO-TAB-button` with the keyboard will focus and select the element. If `false`, keyboard navigation will only focus the `GASCO-TAB-button` element.
         */
        "selectOnFocus"?: boolean;
        /**
          * If `true`, users will be able to swipe between segment buttons to activate them.
         */
        "swipeGesture"?: boolean;
        /**
          * the value of the segment.
         */
        "value"?: string | null;
    }
    interface GascoTabButton {
        /**
          * If `true`, the user cannot interact with the segment button.
         */
        "disabled"?: boolean;
        /**
          * Set the layout of the text and icon in the segment.
         */
        "layout"?: SegmentButtonLayout;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * The value of the segment button.
         */
        "value"?: string;
    }
    interface GascoToast {
        /**
          * If `true`, the toast will animate.
         */
        "animated"?: boolean;
        /**
          * An array of buttons for the toast.
         */
        "buttons"?: (ToastButton | string)[];
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"success"`, `"warning"`, `"danger"`.
         */
        "color"?: Color;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
         */
        "duration"?: number;
        /**
          * Animation to use when the toast is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Additional attributes to pass to the toast.
         */
        "htmlAttributes"?: { [key: string]: any };
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the toast is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Message to be shown in the toast.
         */
        "message"?: string | GascoSafeString;
        /**
          * Emitted after the toast has dismissed.
         */
        "onGascoToastDidDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the toast has presented.
         */
        "onGascoToastDidPresent"?: (event: GascoToastCustomEvent<void>) => void;
        /**
          * Emitted before the toast has dismissed.
         */
        "onGascoToastWillDismiss"?: (event: GascoToastCustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the toast has presented.
         */
        "onGascoToastWillPresent"?: (event: GascoToastCustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * The position of the toast on the screen.
         */
        "position"?: 'top' | 'bottom' | 'middle';
        /**
          * The Toast size.
         */
        "size"?: 'small' | 'default' | 'large';
        /**
          * If `true`, the toast will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
    }
    interface GascoTooltip {
        /**
          * If `true`, the tooltip will be visible.
         */
        "label"?: string;
        /**
          * Emitted when the tooltip is tapped.
         */
        "onGascoTooltip"?: (event: GascoTooltipCustomEvent<void>) => void;
        /**
          * If `true`, the tooltip will be position.
         */
        "position"?: 'top' | 'bottom';
        /**
          * If `true`, the tooltip will stop propagation on tap.
         */
        "stopPropagation"?: boolean;
        /**
          * If `true`, the tooltip will can be clicked and will emit the `gascoTooltip` event.
         */
        "tappable"?: boolean;
        /**
          * If `true`, the tooltip will be visible.
         */
        "visible"?: boolean;
    }
    interface IntrinsicElements {
        "gasco-accordion": GascoAccordion;
        "gasco-accordion-group": GascoAccordionGroup;
        "gasco-autocomplete": GascoAutocomplete;
        "gasco-backdrop": GascoBackdrop;
        "gasco-button": GascoButton;
        "gasco-button-icon": GascoButtonIcon;
        "gasco-card": GascoCard;
        "gasco-card-content": GascoCardContent;
        "gasco-card-header": GascoCardHeader;
        "gasco-card-title": GascoCardTitle;
        "gasco-checkbox": GascoCheckbox;
        "gasco-chip": GascoChip;
        "gasco-content": GascoContent;
        "gasco-datetime": GascoDatetime;
        "gasco-dialog": GascoDialog;
        "gasco-dialog-content": GascoDialogContent;
        "gasco-dialog-footer": GascoDialogFooter;
        "gasco-dialog-header": GascoDialogHeader;
        "gasco-dialog-title": GascoDialogTitle;
        "gasco-divider": GascoDivider;
        "gasco-input": GascoInput;
        "gasco-input-code": GascoInputCode;
        "gasco-item": GascoItem;
        "gasco-label": GascoLabel;
        "gasco-list": GascoList;
        "gasco-list-header": GascoListHeader;
        "gasco-menu": GascoMenu;
        "gasco-modal": GascoModal;
        "gasco-paginator": GascoPaginator;
        "gasco-picker-column-internal": GascoPickerColumnInternal;
        "gasco-picker-internal": GascoPickerInternal;
        "gasco-popover": GascoPopover;
        "gasco-progress": GascoProgress;
        "gasco-radio": GascoRadio;
        "gasco-range": GascoRange;
        "gasco-tab": GascoTab;
        "gasco-tab-button": GascoTabButton;
        "gasco-toast": GascoToast;
        "gasco-tooltip": GascoTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gasco-accordion": LocalJSX.GascoAccordion & JSXBase.HTMLAttributes<HTMLGascoAccordionElement>;
            "gasco-accordion-group": LocalJSX.GascoAccordionGroup & JSXBase.HTMLAttributes<HTMLGascoAccordionGroupElement>;
            "gasco-autocomplete": LocalJSX.GascoAutocomplete & JSXBase.HTMLAttributes<HTMLGascoAutocompleteElement>;
            "gasco-backdrop": LocalJSX.GascoBackdrop & JSXBase.HTMLAttributes<HTMLGascoBackdropElement>;
            "gasco-button": LocalJSX.GascoButton & JSXBase.HTMLAttributes<HTMLGascoButtonElement>;
            "gasco-button-icon": LocalJSX.GascoButtonIcon & JSXBase.HTMLAttributes<HTMLGascoButtonIconElement>;
            "gasco-card": LocalJSX.GascoCard & JSXBase.HTMLAttributes<HTMLGascoCardElement>;
            "gasco-card-content": LocalJSX.GascoCardContent & JSXBase.HTMLAttributes<HTMLGascoCardContentElement>;
            "gasco-card-header": LocalJSX.GascoCardHeader & JSXBase.HTMLAttributes<HTMLGascoCardHeaderElement>;
            "gasco-card-title": LocalJSX.GascoCardTitle & JSXBase.HTMLAttributes<HTMLGascoCardTitleElement>;
            "gasco-checkbox": LocalJSX.GascoCheckbox & JSXBase.HTMLAttributes<HTMLGascoCheckboxElement>;
            "gasco-chip": LocalJSX.GascoChip & JSXBase.HTMLAttributes<HTMLGascoChipElement>;
            "gasco-content": LocalJSX.GascoContent & JSXBase.HTMLAttributes<HTMLGascoContentElement>;
            "gasco-datetime": LocalJSX.GascoDatetime & JSXBase.HTMLAttributes<HTMLGascoDatetimeElement>;
            "gasco-dialog": LocalJSX.GascoDialog & JSXBase.HTMLAttributes<HTMLGascoDialogElement>;
            "gasco-dialog-content": LocalJSX.GascoDialogContent & JSXBase.HTMLAttributes<HTMLGascoDialogContentElement>;
            "gasco-dialog-footer": LocalJSX.GascoDialogFooter & JSXBase.HTMLAttributes<HTMLGascoDialogFooterElement>;
            "gasco-dialog-header": LocalJSX.GascoDialogHeader & JSXBase.HTMLAttributes<HTMLGascoDialogHeaderElement>;
            "gasco-dialog-title": LocalJSX.GascoDialogTitle & JSXBase.HTMLAttributes<HTMLGascoDialogTitleElement>;
            "gasco-divider": LocalJSX.GascoDivider & JSXBase.HTMLAttributes<HTMLGascoDividerElement>;
            "gasco-input": LocalJSX.GascoInput & JSXBase.HTMLAttributes<HTMLGascoInputElement>;
            "gasco-input-code": LocalJSX.GascoInputCode & JSXBase.HTMLAttributes<HTMLGascoInputCodeElement>;
            "gasco-item": LocalJSX.GascoItem & JSXBase.HTMLAttributes<HTMLGascoItemElement>;
            "gasco-label": LocalJSX.GascoLabel & JSXBase.HTMLAttributes<HTMLGascoLabelElement>;
            "gasco-list": LocalJSX.GascoList & JSXBase.HTMLAttributes<HTMLGascoListElement>;
            "gasco-list-header": LocalJSX.GascoListHeader & JSXBase.HTMLAttributes<HTMLGascoListHeaderElement>;
            "gasco-menu": LocalJSX.GascoMenu & JSXBase.HTMLAttributes<HTMLGascoMenuElement>;
            "gasco-modal": LocalJSX.GascoModal & JSXBase.HTMLAttributes<HTMLGascoModalElement>;
            "gasco-paginator": LocalJSX.GascoPaginator & JSXBase.HTMLAttributes<HTMLGascoPaginatorElement>;
            "gasco-picker-column-internal": LocalJSX.GascoPickerColumnInternal & JSXBase.HTMLAttributes<HTMLGascoPickerColumnInternalElement>;
            "gasco-picker-internal": LocalJSX.GascoPickerInternal & JSXBase.HTMLAttributes<HTMLGascoPickerInternalElement>;
            "gasco-popover": LocalJSX.GascoPopover & JSXBase.HTMLAttributes<HTMLGascoPopoverElement>;
            "gasco-progress": LocalJSX.GascoProgress & JSXBase.HTMLAttributes<HTMLGascoProgressElement>;
            "gasco-radio": LocalJSX.GascoRadio & JSXBase.HTMLAttributes<HTMLGascoRadioElement>;
            "gasco-range": LocalJSX.GascoRange & JSXBase.HTMLAttributes<HTMLGascoRangeElement>;
            "gasco-tab": LocalJSX.GascoTab & JSXBase.HTMLAttributes<HTMLGascoTabElement>;
            "gasco-tab-button": LocalJSX.GascoTabButton & JSXBase.HTMLAttributes<HTMLGascoTabButtonElement>;
            "gasco-toast": LocalJSX.GascoToast & JSXBase.HTMLAttributes<HTMLGascoToastElement>;
            "gasco-tooltip": LocalJSX.GascoTooltip & JSXBase.HTMLAttributes<HTMLGascoTooltipElement>;
        }
    }
}
