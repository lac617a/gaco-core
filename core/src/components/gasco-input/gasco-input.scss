@import "./gasco-input.vars";

// Input
// --------------------------------------------------

:host {
  /**
   * @prop --background: Background of the input
   *
   * @prop --color: Color of the input text
   *
   * @prop --padding-top: Top padding of the input
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input
   * @prop --padding-bottom: Bottom padding of the input
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input
   *
   * @prop --placeholder-color: Color of the input placeholder text
   * @prop --placeholder-font-style: Font style of the input placeholder text
   * @prop --placeholder-font-weight: Font weight of the input placeholder text
   * @prop --placeholder-opacity: Opacity of the input placeholder text
   */
  --placeholder-color: #{gasco-color(medium, base)};
  --placeholder-font-style: initial;
  --placeholder-font-weight: initial;
  --placeholder-opacity: .5;
  --padding-top: 0;
  --padding-end: 0;
  --padding-bottom: 0;
  --margin-bottom: 12px;
  --padding-start: 0;
  --box-shadow: 0px 4px 10px rgba(171, 190, 209, 0.4);
  --border-radius: 8px;
  --border-style: solid;
  --border-width: 1px;
  --border-color: #{gasco-color(medium, base)};
  --background: transparent;
  --color: #{gasco-color(medium, base)};
  --line-height-secondary: 16px;
  --font-size-secondary: 12px;
  @include border-radius(var(--border-radius));

  display: flex;
  position: relative;

  // flex: 1;
  align-items: center;

  width: 100%;

  padding: 0 !important;
  margin-bottom: var(--margin-bottom);

  color: var(--color);
  background: var(--background);
  border-style: var(--border-style);
  border-color: var(--border-color);
  border-width: var(--border-width);

  font-family: $font-family-base;

  z-index: $z-index-item-input;
  transition: 300ms;
}

:host(.gasco-color) {
  color: current-color(base);
}

:host(.has-label) {
  margin-top: var(--margin-bottom);
}

// Native Text Input
// --------------------------------------------------

.native-input, .native-input-code {
  @include text-inherit();

  display: inline-block;

  flex: 1;
  width: 100%;
  max-width: 100%;
  max-height: 100%;

  outline: none;

  background: transparent;

  box-sizing: border-box;
  appearance: none;
  border: 0;
  transition: 300ms;

  &::placeholder {
    color: var(--placeholder-color);

    font-family: inherit;
    font-style: var(--placeholder-font-style);
    font-weight: var(--placeholder-font-weight);

    // opacity: var(--placeholder-opacity);
  }

  &:-webkit-autofill {
    background-color: transparent;
  }

  &:invalid {
    box-shadow: none;
  }

  &::-ms-clear {
    display: none;
  }
}

.native-input {
  @include padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));
  &-label {
    --background: white;
    position: absolute;
    top: -10px;
    left: 10px;
    background: var(--background);
    padding: 0 4px;
    font-weight: 400;
    line-height: var(--line-height-secondary);
    font-size: var(--font-size-secondary);
    border-radius: var(--border-radius);
    transition: 300ms;
  }
  &-textHelp, &-limit {
    position: absolute;
    bottom: -17px;
    left: 10px;
    font-weight: 400;
    font-size: var(--font-size-secondary);
    line-height: var(--line-height-secondary);
    transition: 300ms;
  }
  &-limit {
    left: inherit;
    right: 10px;
  }
}


// DISABLED
:host[disabled] {
  --border-color: #{gasco-color(light, base)} !important;
  --background: #{gasco-color(light, base)} !important;
}
.native-input[disabled] {
  opacity: .8;
}

:host[disabled] .native-input-label {
  --background: #{gasco-color(light, base)};
}


// Input Cover: Unfocused
// --------------------------------------------------
// The input cover is the div that actually receives the
// tap/click event when scroll assist is configured to true.
// This make it so the native input element is not clickable.
// This will only show when the scroll assist is configured
// otherwise the .input-cover will not be rendered at all
// The input cover is not clickable when the input is disabled
.cloned-input {
  @include position(0, null, null, 0);

  position: absolute;

  pointer-events: none;
}


// Indicator Input Icon
// --------------------------------------------------

.input-indicator-icon {
  @include margin(0);
  @include padding(0);
  @include background-position(left);

  border: 0;
  position: relative;
  outline: none;

  background-color: transparent;
  background-repeat: no-repeat;

  appearance: none;

  text-align: right;
  align-items: center;
  justify-content: flex-end;
  display: flex;
  margin-left: 12px;
  color: #051C24;
  font-weight: 600;
  font-size: 16px;
  line-height: 28px;
  transition: 300ms;
  &::after {
    content: "";
    position: absolute;
    height: 70%;
    width: 1px;
    right: -10px;
    background: var(--border-color);
    transition: 300ms;
  }
}

// Input Has focus
// --------------------------------------------------
// When the input has focus, then the input cover should be hidden

:host(.has-focus) {
  pointer-events: none;
  --border-color: #{gasco-color(primary, base)} !important;
  .native-input {
    &-label, &-textHelp, &-limit, &.code {
      color: #{gasco-color(primary, base)};
    }
  }
  .input-indicator-icon{
    &::after {
      background: #{gasco-color(primary, base)};
    }
  }
}

:host(.has-focus) [slot="start"] {
  color: #{gasco-color(primary, base)};
}

:host(.has-focus) input,
:host(.has-focus) a,
:host(.has-focus) button {
  pointer-events: auto;
}

// Input Has Error or Success
// --------------------------------------------------
// When the input has focus, then the input cover should be hidden

:host(.has-error) {
  --border-color: #{gasco-color(secondary, base)} !important;
  .native-input {
    &-label, &-textHelp, &-limit, &.code {
      color: #{gasco-color(secondary, base)};
    }
  }
  .input-indicator-icon{
    &::after {
      background: #{gasco-color(secondary, base)};
    }
  }
}

:host(.has-success) {
  --border-color: #{gasco-color(success, base)} !important;
  .native-input {
    &-label, &-textHelp, &-limit, &.code {
      color: #{gasco-color(success, base)};
    }
  }
  .input-indicator-icon{
    &::after {
      background: #{gasco-color(success, base)};
    }
  }
}

// Input Icons
// --------------------------------------------------

::slotted(ion-icon[slot="start"]),
::slotted(ion-icon[slot="end"]) {
  font-size: 1.4em !important;
  pointer-events: none;
}

::slotted(ion-icon[slot="start"]) {
  @include margin(0, -.3em, 0, .6em);
}

::slotted(ion-icon[slot="end"]) {
  @include margin(0, .6em, 0, -.3em);
}

// Input Hover
@media (any-hover: hover) {
  :host(:not([disabled]):hover) {
    box-shadow: var(--box-shadow);
    --border-color: #{gasco-color(dark, base)};
    border-radius: var(--border-radius);
  }
}